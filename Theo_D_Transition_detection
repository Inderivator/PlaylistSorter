{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNeYK/FkpcPplWN2UVHqxPk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Inderivator/PlaylistSorter/blob/Playlist-sorter/Theo_D_Transition_detection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CQ9gZcTDOY9y"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://youtu.be/9pa2hr0Nm4U?si=LXoYNZ5nvGiJJUQ_"
      ],
      "metadata": {
        "id": "lP7e-P3BPSWz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount=True)"
      ],
      "metadata": {
        "id": "sgDJuDlvPThH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0710e68b-02d8-4dde-f794-4dbf50137c64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import librosa\n",
        "# Charger le fichier MP3\n",
        "filename = '/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\n",
        "y, sr = librosa.load(filename, sr=None)  # y est le signal audio, sr est le taux d'échantillonnage"
      ],
      "metadata": {
        "id": "c-EYIiixQTdU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE POUR SUPPRIMER LE TROP PLEIN DE FICHIERS DANS GOOGLE DRIVE\n",
        "import shutil\n",
        "\n",
        "for file in files_in_folder:\n",
        "    file_path = os.path.join(folder_path, file)\n",
        "    if file != '10MIN_DJ.mp3':\n",
        "        try:\n",
        "            if os.path.isfile(file_path):\n",
        "                os.remove(file_path)\n",
        "            elif os.path.isdir(file_path):\n",
        "                shutil.rmtree(file_path)\n",
        "            print(f'Supprimé : {file}')\n",
        "        except Exception as e:\n",
        "            print(f'Erreur lors de la suppression de {file}: {e}')"
      ],
      "metadata": {
        "id": "8_nVOcz2YjPf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "ac689914-83af-47e5-e480-772565b43878"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'files_in_folder' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-4ba82d1b759a>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mshutil\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfiles_in_folder\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfolder_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'10MIN_DJ.mp3'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'files_in_folder' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!rm -rf '/content/drive/MyDrive/PROJET_SON/*'"
      ],
      "metadata": {
        "id": "vvAObLjVY2j-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST AVEC LIBROSA\n",
        "import librosa\n",
        "import numpy as np\n",
        "import soundfile as sf\n",
        "\n",
        "filename = '/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\n",
        "y, sr = librosa.load(filename, sr=None)\n",
        "\n",
        "# STFT\n",
        "D = np.abs(librosa.stft(y))\n",
        "\n",
        "# Lissage\n",
        "D_smooth = librosa.decompose.nn_filter(D, aggregate=np.median, metric='cosine')\n",
        "\n",
        "#différence entre les colonnes consécutives\n",
        "diff = np.diff(D_smooth, axis=1)\n",
        "diff_sum = np.sum(diff, axis=0)\n",
        "\n",
        "# Moyenne Mobile\n",
        "window_size = 10  # Taille fenetre\n",
        "diff_sum_smooth = np.convolve(diff_sum, np.ones(window_size)/window_size, mode='same')\n",
        "\n",
        "#seuil\n",
        "threshold = np.mean(diff_sum_smooth) + 2 * np.std(diff_sum_smooth)\n",
        "change_points = np.where(diff_sum_smooth > threshold)[0]\n",
        "change_samples = librosa.frames_to_samples(change_points)\n",
        "\n",
        "# Durée minimale\n",
        "min_duration = 20\n",
        "min_samples = min_duration * sr\n",
        "\n",
        "# Listes segments\n",
        "music_segments = []\n",
        "for i in range(len(change_samples) - 1):\n",
        "    start = change_samples[i]\n",
        "    end = change_samples[i + 1]\n",
        "    if end - start > min_samples:\n",
        "        music_segments.append((start, end))\n",
        "\n",
        "# Suppression anciens fichiers\n",
        "!rm -f /content/drive/MyDrive/PROJET_SON/*.wav\n",
        "\n",
        "# Sauvegarder les segments\n",
        "for i, (start, end) in enumerate(music_segments):\n",
        "    sf.write(f'/content/drive/MyDrive/PROJET_SON/music_segment_{i}.wav', y[start:end], sr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "4zbY0t_-ZjLN",
        "outputId": "c932d53c-faca-4276-e585-2fdd954948bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-d98fc8c468de>\u001b[0m in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# Appliquer un lissage sur le spectrogramme pour réduire les bruits\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mD_smooth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibrosa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecompose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maggregate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'cosine'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Calculer la différence entre les colonnes consécutives pour identifier les changements\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/librosa/decompose.py\u001b[0m in \u001b[0;36mnn_filter\u001b[0;34m(S, rec, aggregate, axis, **kwargs)\u001b[0m\n\u001b[1;32m    536\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"sparse\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 538\u001b[0;31m         \u001b[0mrec_s\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msegment\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecurrence_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    539\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    540\u001b[0m         \u001b[0mrec_s\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcsc_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/librosa/segment.py\u001b[0m in \u001b[0;36mrecurrence_matrix\u001b[0;34m(data, k, width, metric, sym, sparse, mode, bandwidth, self, axis, full)\u001b[0m\n\u001b[1;32m    631\u001b[0m         \u001b[0mkng_mode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    632\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 633\u001b[0;31m     \u001b[0mrec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mknn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkneighbors_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkng_mode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolil\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    634\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mfull\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_base.py\u001b[0m in \u001b[0;36mkneighbors_graph\u001b[0;34m(self, X, n_neighbors, mode)\u001b[0m\n\u001b[1;32m    981\u001b[0m         \u001b[0;31m# construct CSR matrix representation of the k-NN graph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    982\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"connectivity\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 983\u001b[0;31m             \u001b[0mA_ind\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkneighbors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_neighbors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    984\u001b[0m             \u001b[0mn_queries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mA_ind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    985\u001b[0m             \u001b[0mA_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_queries\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mn_neighbors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_base.py\u001b[0m in \u001b[0;36mkneighbors\u001b[0;34m(self, X, n_neighbors, return_distance)\u001b[0m\n\u001b[1;32m    859\u001b[0m                 \u001b[0mkwds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meffective_metric_params_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    860\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 861\u001b[0;31m             chunked_results = list(\n\u001b[0m\u001b[1;32m    862\u001b[0m                 pairwise_distances_chunked(\n\u001b[1;32m    863\u001b[0m                     \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mpairwise_distances_chunked\u001b[0;34m(X, Y, reduce_func, metric, n_jobs, working_memory, **kwds)\u001b[0m\n\u001b[1;32m   1865\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1866\u001b[0m             \u001b[0mX_chunk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msl\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1867\u001b[0;31m         \u001b[0mD_chunk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpairwise_distances\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_chunk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1868\u001b[0m         if (X is Y or Y is None) and PAIRWISE_DISTANCE_FUNCTIONS.get(\n\u001b[1;32m   1869\u001b[0m             \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mpairwise_distances\u001b[0;34m(X, Y, metric, n_jobs, force_all_finite, **kwds)\u001b[0m\n\u001b[1;32m   2037\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpartial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcdist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2038\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2039\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_parallel_pairwise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2040\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36m_parallel_pairwise\u001b[0;34m(X, Y, func, n_jobs, **kwds)\u001b[0m\n\u001b[1;32m   1577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1578\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0meffective_n_jobs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1579\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1580\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1581\u001b[0m     \u001b[0;31m# enforce a threading backend to prevent data communication overhead\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mcosine_distances\u001b[0;34m(X, Y)\u001b[0m\n\u001b[1;32m    998\u001b[0m     \"\"\"\n\u001b[1;32m    999\u001b[0m     \u001b[0;31m# 1.0 - cosine_similarity(X, Y) without copy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1000\u001b[0;31m     \u001b[0mS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcosine_similarity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1001\u001b[0m     \u001b[0mS\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1002\u001b[0m     \u001b[0mS\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mcosine_similarity\u001b[0;34m(X, Y, dense_output)\u001b[0m\n\u001b[1;32m   1399\u001b[0m         \u001b[0mY_normalized\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnormalize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1400\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1401\u001b[0;31m     \u001b[0mK\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_normalized\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_normalized\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdense_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdense_output\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1402\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1403\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/extmath.py\u001b[0m in \u001b[0;36msafe_sparse_dot\u001b[0;34m(a, b, dense_output)\u001b[0m\n\u001b[1;32m    190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m     if (\n\u001b[0;32m--> 192\u001b[0;31m         \u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    193\u001b[0m         \u001b[0;32mand\u001b[0m \u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m         \u001b[0;32mand\u001b[0m \u001b[0mdense_output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/scipy/sparse/_base.py\u001b[0m in \u001b[0;36missparse\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m   1459\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1460\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1461\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1462\u001b[0m     \"\"\"Is `x` of a sparse array type?\n\u001b[1;32m   1463\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# RECONSTITUTION AUDIO LISSE\n",
        "import librosa\n",
        "import numpy as np\n",
        "import soundfile as sf\n",
        "\n",
        "filename = '/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\n",
        "y, sr = librosa.load(filename, sr=None)\n",
        "\n",
        "# Calcul STFT\n",
        "D = np.abs(librosa.stft(y))\n",
        "\n",
        "# Filtrage spectrogramme\n",
        "D_smooth = librosa.decompose.nn_filter(D, aggregate=np.median, metric='cosine')\n",
        "\n",
        "# Reconstituer signal\n",
        "y_smooth = librosa.istft(D_smooth)\n",
        "\n",
        "# Sauvegarde\n",
        "output_filename = '/content/drive/MyDrive/PROJET_SON/DJ_10MIN_LISSE.wav'\n",
        "sf.write(output_filename, y_smooth, sr)\n"
      ],
      "metadata": {
        "id": "-vKuFeZshcyt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#DÉTECTION DE SEGMENTS DANS UN FICHIER AUDIO\n",
        "import librosa\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Charger audio lissé\n",
        "filename = '/content/drive/MyDrive/PROJET_SON/DJ_10MIN_LISSE.wav'\n",
        "y, sr = librosa.load(filename, sr=None)\n",
        "\n",
        "# Calculer STFT\n",
        "D = np.abs(librosa.stft(y))\n",
        "\n",
        "# Détecter changements\n",
        "diff = np.diff(D, axis=1)\n",
        "diff_sum = np.sum(diff, axis=0)\n",
        "\n",
        "# Lissage moyenne mobile\n",
        "window_size = 4\n",
        "diff_sum_smooth = np.convolve(diff_sum, np.ones(window_size)/window_size, mode='same')\n",
        "\n",
        "# Ajuster seuil\n",
        "threshold = np.mean(diff_sum_smooth) + 3 * np.std(diff_sum_smooth)\n",
        "change_points = np.where(diff_sum_smooth > threshold)[0]\n",
        "\n",
        "# Convertir points changement\n",
        "change_samples = librosa.frames_to_samples(change_points)\n",
        "\n",
        "# Filtrer durée minimale\n",
        "min_duration = 10\n",
        "min_samples = min_duration * sr\n",
        "\n",
        "# Stocker segments\n",
        "music_segments = []\n",
        "for i in range(len(change_samples) - 1):\n",
        "    start = change_samples[i]\n",
        "    end = change_samples[i + 1]\n",
        "    if end - start > min_samples:\n",
        "        music_segments.append((start, end))\n",
        "\n",
        "# Convertir segments en secondes\n",
        "music_segments_seconds = [(librosa.samples_to_time(start, sr=sr), librosa.samples_to_time(end, sr=sr)) for start, end in music_segments]\n",
        "\n",
        "# Durée totale\n",
        "total_duration_seconds = librosa.get_duration(y=y, sr=sr)\n",
        "\n",
        "# Créer figure pour visualisation\n",
        "plt.figure(figsize=(15, 3))\n",
        "plt.plot((0, total_duration_seconds), (0, 0), 'k', label='Set DJ')  # Ligne set DJ\n",
        "\n",
        "# Marquer segments\n",
        "for i, (start_sec, end_sec) in enumerate(music_segments_seconds, 1):\n",
        "    plt.plot((start_sec, end_sec), (0, 0), 'r', linewidth=5, label=f'Segment {i}' if i == 1 else \"\")\n",
        "\n",
        "plt.title('Segments détectés dans le set DJ')\n",
        "plt.xlabel('Temps (secondes)')\n",
        "plt.legend()\n",
        "plt.yticks([])  # Masquer axe y\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "TuTmARM7k4pm",
        "outputId": "99deafc4-80fd-4155-a1bc-934ae183b71c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x300 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABJ4AAAE9CAYAAABKo6gNAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA/LklEQVR4nO3deVxV1f7/8fdhOAwCIiqDEyLOiqaYQ16HnG3Ssix/DeJsaWrdBs1M7Wpat7Sycsj7BUvLcsx6ZE6Js+aImqWmkF0nzBlJUFi/P/x6vh1BRGVzEF7Px+M8Hp691177s/deHeDd2vvYjDFGAAAAAAAAQB5zc3UBAAAAAAAAKJwIngAAAAAAAGAJgicAAAAAAABYguAJAAAAAAAAliB4AgAAAAAAgCUIngAAAAAAAGAJgicAAAAAAABYguAJAAAAAAAAliB4AgAAAAAAgCUIngAAQL5ZtGiR3n77bV26dMnVpeTo0qVLGj9+vL799ltXl4Ii4rPPPtNHH33k6jIAAMhzBE8AACBPtGzZUi1btrzu+i1btuiJJ55Q5cqV5enpmX+F3YKhQ4dq+vTpaty4satLyRMVK1ZUTEyMq8so8Gw2m0aNGuV4HxcXJ5vNpqSkJEv3u2jRIvXv31/169e3dD8AALgCwRMAoNDZtWuXHn30UYWHh8vb21tly5ZV27ZtNWnSJFeXlu+OHDmiUaNGaceOHS6t48yZM+ratavGjx+vLl26ZFn/1ltvaeHChZbWkJqaqlGjRik+Pj7Hdt98841mzpypH374QaVLl7a0JkiffPKJ4uLict3eZrM5Xh4eHgoKClJ0dLQGDx6sPXv2ZGmflJQkm82md999Nw+rzjtJSUnq1auXZs2apXvuucfV5QAAkOcIngAAhcr69evVoEEDJSQkqE+fPvroo4/Uu3dvubm56YMPPnB1efnuyJEjGj16tMuDpx07duj111/XoEGDsl2fX8HT6NGjbxg8JSUlafHixapcubKl9eCKmw2eJKlt27b6/PPPFRsbqzfffFP169fXjBkzVLduXU2YMCHPanv66af1119/KTw8PM/6vNaOHTs0depUPfzww5btAwAAV/JwdQEAAOSlsWPHqnjx4tq8ebMCAwOd1iUnJ7umKNzwNryCZPDgwa4u4aZdvnxZmZmZstvtri4lX1StWlVPPfWU07Lx48frwQcf1D//+U9Vr15d9913323vx93dXe7u7rfdT046d+5saf8AALgaM54AAIXKgQMHVKtWrSyhkyQFBwdnWTZz5kxFR0fLx8dHQUFBeuKJJ/THH39kaffxxx+rUqVK8vHxUcOGDbVmzZosYUp8fLxsNpu+/vprjR49WmXLlpW/v78effRRnT17VmlpaRoyZIiCg4Pl5+enHj16KC0t7ZZqatmypWrXrq09e/bo3nvvla+vr8qWLat33nnHqZ67775bktSjRw/H7UlXZ5fs379fXbp0UWhoqLy9vVWuXDk98cQTOnv27A3P87Rp0xQZGel0PrKTlpamkSNHqnLlyvLy8lL58uX1yiuvOB23zWbThQsXNGPGDEeNf38e0eHDh9WzZ0+FhITIy8tLtWrV0v/8z/9k2dfFixc1atQoVa1aVd7e3goLC9MjjzyiAwcOKCkpyXHb3OjRox37+fvzfH799Vc9+uijCgoKkre3txo0aKBFixY57ePSpUsaPXq0qlSpIm9vb5UsWVL/+Mc/tGzZshzPV262u144FxMTo4oVKzre//3Wsffff1+RkZHy8vLK9jaznJw5c0ZDhgxR+fLl5eXlpcqVK+vtt99WZmbmDbfdsmWL2rdvr1KlSsnHx0cRERHq2bOnU5vMzEy9//77qlWrlry9vRUSEqJ+/frp9OnTjjYVK1bUzz//rFWrVjmuya0GlCVLltTs2bPl4eGhsWPH3lIf18ruGU+5OfbZs2crOjpa/v7+CggIUFRUVJYZl7dz/gEAuJMw4wkAUKiEh4drw4YN2r17t2rXrp1j27Fjx2rEiBHq2rWrevfurRMnTmjSpElq3ry5tm/f7givJk+erIEDB6pZs2Z64YUXlJSUpM6dO6tEiRIqV65cln7HjRsnHx8fDR06VL/99psmTZokT09Pubm56fTp0xo1apQ2btyouLg4RURE6I033rjpmiTp9OnT6tChgx555BF17dpVc+fO1auvvqqoqCh17NhRNWrU0Jtvvqk33nhDffv2VbNmzSRJ99xzj9LT09W+fXulpaXp+eefV2hoqA4fPqzvvvtOZ86cUfHixa973v7zn/+oX79+uueeezRkyBAdPHhQDz30kIKCglS+fHlHu8zMTD300ENau3at+vbtqxo1amjXrl2aOHGi9u3b57i17vPPP1fv3r3VsGFD9e3bV5IUGRkpSTp+/LgaN24sm82mgQMHqnTp0lq8eLF69eqlc+fOaciQIZKkjIwMPfDAA1qxYoWeeOIJDR48WOfPn9eyZcu0e/dutWnTRpMnT9azzz6rhx9+WI888ogkqU6dOpKkn3/+WU2bNlXZsmU1dOhQFStWTF9//bU6d+6sefPmOW6DGjVqlMaNG+eo99y5c9qyZYu2bdumtm3bXvec3ep2OYmNjdXFixfVt29feXl5KSgoKNfbpqamqkWLFjp8+LD69eunChUqaP369Ro2bJiOHj2q999//7rbJicnq127dipdurSGDh2qwMBAJSUlaf78+U7t+vXrp7i4OPXo0UODBg1SYmKiPvroI23fvl3r1q2Tp6en3n//fT3//PPy8/PT8OHDJUkhISG3dD4kqUKFCmrRooVWrlypc+fOKSAg4Jb7yk5ujn3ZsmXq1q2bWrdurbfffluS9Msvv2jdunWO2XS3c/4BALjjGAAACpGlS5cad3d34+7ubpo0aWJeeeUVs2TJEpOenu7ULikpybi7u5uxY8c6Ld+1a5fx8PBwLE9LSzMlS5Y0d999t7l06ZKjXVxcnJFkWrRo4Vi2cuVKI8nUrl3baX/dunUzNpvNdOzY0WlfTZo0MeHh4TddkzHGtGjRwkgyn332mWNZWlqaCQ0NNV26dHEs27x5s5FkYmNjnfrcvn27kWTmzJmT3Wm8rvT0dBMcHGzuuusuk5aW5lg+bdq0LOfj888/N25ubmbNmjVOfUyZMsVIMuvWrXMsK1asmOnevXuW/fXq1cuEhYWZP//802n5E088YYoXL25SU1ONMcb8z//8j5FkJkyYkKWPzMxMY4wxJ06cMJLMyJEjs7Rp3bq1iYqKMhcvXnTa7p577jFVqlRxLKtbt665//77szkzOcvNdi1atHA6f1d1797daZwkJiYaSSYgIMAkJyfnav/h4eFO5/df//qXKVasmNm3b59Tu6FDhxp3d3dz6NCh6/a1YMECI8ls3rz5um3WrFljJJlZs2Y5Lf/hhx+yLK9Vq1a2x309ksyAAQOuu37w4MFGkklISDDG/N/5+ve//52rvv8+PmJjY40kk5iYaIzJ3bEPHjzYBAQEmMuXL1+3ze2cfwAA7jTcagcAKFTatm2rDRs26KGHHlJCQoLeeecdtW/fXmXLlnW6bWr+/PnKzMxU165d9eeffzpeoaGhqlKlilauXCnpym01J0+eVJ8+feTh8X8ThZ988kmVKFEi2xqeeeYZeXp6Ot43atRIxpgst+M0atRIf/zxhy5fvnxTNV3l5+fn9Jwbu92uhg0b6uDBgzc8T1dnNC1ZskSpqak3bH/Vli1blJycrP79+zs9TygmJibLLKk5c+aoRo0aql69utPxtGrVSpKyHM+1jDGaN2+eHnzwQRljnPpo3769zp49q23btkmS5s2bp1KlSun555/P0o/NZstxP6dOndKPP/6orl276vz58459nDx5Uu3bt9f+/ft1+PBhSVJgYKB+/vln7d+//8Yn629udbucdOnS5Za/dW/OnDlq1qyZSpQo4XRe27Rpo4yMDK1evfq6216ddffdd9/p0qVL1+2/ePHiatu2rVP/0dHR8vPzu+G1vx1+fn6SpPPnz+d537k59sDAQF24cCHH2y9v5/wDAHCn4VY7AEChc/fdd2v+/PlKT09XQkKCFixYoIkTJ+rRRx/Vjh07VLNmTe3fv1/GGFWpUiXbPq4GR7///rskZfmGMw8PD6fn7vxdhQoVnN5fDWT+fhva1eWZmZk6e/asSpYsmeuaripXrlyWUKVEiRLauXNnttv/XUREhF588UVNmDBBs2bNUrNmzfTQQw/pqaeeyvE2u6vn49oaPT09ValSJadl+/fv1y+//HLdcORGD3s/ceKEzpw5o2nTpmnatGk59nHgwAFVq1bNKRzMrd9++03GGI0YMUIjRoy47n7Kli2rN998U506dVLVqlVVu3ZtdejQQU8//bTjlr3rudXtchIREXHL2+7fv187d+68pWvTokULdenSRaNHj9bEiRPVsmVLde7cWf/v//0/eXl5Ofo/e/Zsts9Vu1H/tyslJUWS5O/vn+d95+bYn3vuOX399dfq2LGjypYtq3bt2qlr167q0KGDo5/bOf8AANxpCJ4AAIWW3W7X3XffrbvvvltVq1ZVjx49NGfOHI0cOVKZmZmy2WxavHhxtt9adXXWxK243rdgXW+5MUaSbrqmG/V3I++9955iYmL0zTffaOnSpRo0aJDGjRunjRs3ZvvsqpuVmZmpqKio6369/bVBXHbbS9JTTz2l7t27Z9vmdoKba/fz0ksvqX379tm2uRo8Nm/eXAcOHHCcs+nTp2vixImaMmWKevfufd195GY7m82W7bXLyMjItk8fH5+bOs6/y8zMVNu2bfXK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6dI37ONq4JXTsV0Na27X38+DdPPnIiUlRf369dOgQYOyrKtQoYLsdru2bdum+Ph4LV26VG+88YZGjRqlzZs3KzAwUJJ06tQpSXKcGwAAgJvFjCcAAJCnQkJCVKZMGR08eFCVK1d2emUX/tyshIQEx0wlSdq4caP8/PxUvnx5SVcCmqZNm2r06NHavn277Ha7FixYkG1fkZGRCggI0J49e5yWX6+P3BxbnTp1tGPHDkdoc60aNWpo3bp1TsvWrVunmjVr5voc1KhRQz/99JPTso0bNzq9r1+/vvbs2ZOlzsqVK8tut0uSPDw81KZNG73zzjvauXOnkpKS9OOPPzr62L17t8qVK+cI6AAAAG4WM54AAECeGz16tAYNGqTixYurQ4cOSktL05YtW3T69Gm9+OKLt9V3enq6evXqpddff11JSUkaOXKkBg4cKDc3N23atEkrVqxQu3btFBwcrE2bNunEiROqUaNGtn25ubmpTZs2Wrt2rTp37ixJN+zjRsfWrVs3vfXWW+rcubPGjRunsLAwbd++XWXKlFGTJk308ssvq2vXrqpXr57atGmjb7/9VvPnz9fy5ctzfQ769++v9957Ty+//LJ69+6trVu3Ki4uzqnNq6++qsaNG2vgwIHq3bu3ihUrpj179mjZsmX66KOP9N133+ngwYNq3ry5SpQooe+//16ZmZmqVq2ao481a9aoXbt2N3eBAAAA/oYZTwAAIM/17t1b06dPV2xsrKKiotSiRQvFxcXlyYyn1q1bq0qVKmrevLkef/xxPfTQQxo1apQkKSAgQKtXr9Z9992nqlWr6vXXX9d7772njh075ljr7NmzHbex3aiPGx2b3W7X0qVLFRwcrPvuu09RUVEaP36841a8zp0764MPPtC7776rWrVqaerUqYqNjVXLli1zfQ4qVKigefPmaeHChapbt66mTJmit956y6lNnTp1tGrVKu3bt0/NmjVTvXr19MYbb6hMmTKSpMDAQM2fP1+tWrVSjRo1NGXKFH355ZeqVauWJOnixYtauHCh+vTpk+u6AAAArmUzxhhXFwEAAJAbMTExOnPmjBYuXJhnfRpj1KhRI73wwgvq1q1bnvV7p5s8ebIWLFigpUuXuroUAABwB2PGEwAAKNJsNpumTZumy5cvu7qUAsXT01OTJk1ydRkAAOAOx4wnAABwx7BixhMAAACsQ/AEAAAAAAAAS3CrHQAAAAAAACxB8AQAAAAAAABLEDwBAAAAAADAEgRPAAAAAAAAsATBEwAAAAAAACxB8AQAAAAAAABLEDwBAAAAAADAEgRPAAAAAAAAsATBEwAAAAAAACzx/wFecQB3fPL9MgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TENTATIVE ANALYSE DE MOTIFS SONORES RÉCURRENTS\n",
        "import librosa\n",
        "import librosa.display\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Charger fichier audio\n",
        "filename = '/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\n",
        "y, sr = librosa.load(filename, sr=None)\n",
        "\n",
        "# Découper en segments\n",
        "segment_length = sr\n",
        "segments = [y[i:i + segment_length] for i in range(0, len(y), segment_length)]\n",
        "\n",
        "# Calculer MFCC par segment\n",
        "mfccs = [librosa.feature.mfcc(y=segment, sr=sr, n_mfcc=13) for segment in segments if len(segment) == segment_length]\n",
        "\n",
        "# Aplatir MFCC pour clustering\n",
        "mfccs_flattened = [mfcc.flatten() for mfcc in mfccs]\n",
        "\n",
        "# Appliquer K-means\n",
        "kmeans = KMeans(n_clusters=5, random_state=0).fit(mfccs_flattened)\n",
        "\n",
        "# Identifier clusters répétés\n",
        "labels, counts = np.unique(kmeans.labels_, return_counts=True)\n",
        "repeated_clusters = labels[counts > 3]\n",
        "\n",
        "# Créer timeline des segments\n",
        "timeline = np.zeros(len(y))\n",
        "\n",
        "# Marquer segments répétés\n",
        "for label in repeated_clusters:\n",
        "    segment_indices = np.where(kmeans.labels_ == label)[0]\n",
        "    for idx in segment_indices:\n",
        "        start = idx * segment_length\n",
        "        end = start + segment_length\n",
        "        timeline[start:end] = label + 1\n",
        "\n",
        "# Visualiser motifs récurrents\n",
        "plt.figure(figsize=(14, 5))\n",
        "librosa.display.waveshow(y, sr=sr, alpha=0.5)\n",
        "plt.vlines(np.where(timeline > 0)[0] / sr, -1, 1, color='r', alpha=0.5)\n",
        "plt.title('Motifs sonores récurrents dans le fichier audio')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3vwGsrW3o66U",
        "outputId": "c7ad7ce2-aab0-4ddb-960a-306241b7a302"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install shazamio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "crEbjqDDYHzi",
        "outputId": "d0a76cb3-2330-48ab-91e0-b0814a51b9cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting shazamio\n",
            "  Downloading shazamio-0.5.1-py3-none-any.whl (36 kB)\n",
            "Collecting aiofiles<23.0.0,>=22.1.0 (from shazamio)\n",
            "  Downloading aiofiles-22.1.0-py3-none-any.whl (14 kB)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.10/dist-packages (from shazamio) (3.9.3)\n",
            "Collecting aiohttp-retry<3.0.0,>=2.8.3 (from shazamio)\n",
            "  Downloading aiohttp_retry-2.8.3-py3-none-any.whl (9.8 kB)\n",
            "Requirement already satisfied: anyio<4.0.0,>=3.6.2 in /usr/local/lib/python3.10/dist-packages (from shazamio) (3.7.1)\n",
            "Collecting dataclass-factory==2.16 (from shazamio)\n",
            "  Downloading dataclass_factory-2.16-py3-none-any.whl (29 kB)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.24.0 in /usr/local/lib/python3.10/dist-packages (from shazamio) (1.25.2)\n",
            "Collecting pydantic<2.0.0,>=1.10.2 (from shazamio)\n",
            "  Downloading pydantic-1.10.15-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m67.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pydub<0.26.0,>=0.25.1 (from shazamio)\n",
            "  Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n",
            "Requirement already satisfied: pytest<8.0.0,>=7.2.0 in /usr/local/lib/python3.10/dist-packages (from shazamio) (7.4.4)\n",
            "Collecting pytest-asyncio<0.21.0,>=0.20.3 (from shazamio)\n",
            "  Downloading pytest_asyncio-0.20.3-py3-none-any.whl (12 kB)\n",
            "Collecting shazamio-core<2.0.0,>=1.0.7 (from shazamio)\n",
            "  Downloading shazamio_core-1.0.7-cp310-cp310-manylinux_2_28_x86_64.whl (2.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (1.3.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (23.2.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (1.4.1)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (6.0.5)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (1.9.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (4.0.3)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<4.0.0,>=3.6.2->shazamio) (3.6)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4.0.0,>=3.6.2->shazamio) (1.3.1)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4.0.0,>=3.6.2->shazamio) (1.2.0)\n",
            "Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<2.0.0,>=1.10.2->shazamio) (4.10.0)\n",
            "Requirement already satisfied: iniconfig in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (2.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (24.0)\n",
            "Requirement already satisfied: pluggy<2.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (1.4.0)\n",
            "Requirement already satisfied: tomli>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (2.0.1)\n",
            "Installing collected packages: pydub, shazamio-core, pydantic, dataclass-factory, aiofiles, pytest-asyncio, aiohttp-retry, shazamio\n",
            "  Attempting uninstall: pydantic\n",
            "    Found existing installation: pydantic 2.6.4\n",
            "    Uninstalling pydantic-2.6.4:\n",
            "      Successfully uninstalled pydantic-2.6.4\n",
            "Successfully installed aiofiles-22.1.0 aiohttp-retry-2.8.3 dataclass-factory-2.16 pydantic-1.10.15 pydub-0.25.1 pytest-asyncio-0.20.3 shazamio-0.5.1 shazamio-core-1.0.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST SHAZAMIO\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    shazam = Shazam()\n",
        "    with open(file_path, 'rb') as f:\n",
        "        data = f.read()  # Lire fichier\n",
        "        track = await shazam.recognize(data)  # Reconnaître chanson\n",
        "        return track\n",
        "\n",
        "async def main():\n",
        "    files_to_recognize = ['/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3']\n",
        "\n",
        "    for file_path in files_to_recognize:\n",
        "        track_info = await recognize_song(file_path)\n",
        "        print(track_info['track']['title'])  # Afficher titre\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o8e1HeepaypT",
        "outputId": "e6e086f8-fda3-432a-9738-86dc2cee4949"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Universal Magnetic (Best of Decade I Version)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#DIVISION DE FICHIERS AUDIO EN SEGMENTS\n",
        "import librosa\n",
        "import soundfile as sf\n",
        "from io import BytesIO\n",
        "\n",
        "def divide_mix_into_segments(file_path, segment_length=5):\n",
        "    \"\"\"\n",
        "    Divise un fichier audio en segments de durée fixe.\n",
        "\n",
        "    Args:\n",
        "    - file_path: Chemin du fichier audio.\n",
        "    - segment_length: Durée de chaque segment en secondes.\n",
        "\n",
        "    Returns:\n",
        "    - segments: Liste des segments audio sous forme de tableaux d'octets.\n",
        "    \"\"\"\n",
        "    # Charger audio\n",
        "    y, sr = librosa.load(file_path, sr=None)\n",
        "\n",
        "    # Echantillons par segment\n",
        "    samples_per_segment = segment_length * sr\n",
        "\n",
        "    # Calculer segments\n",
        "    total_segments = int(len(y) / samples_per_segment)\n",
        "\n",
        "    segments = []\n",
        "\n",
        "    for i in range(total_segments):\n",
        "        # Extraire segment\n",
        "        start_sample = i * samples_per_segment\n",
        "        end_sample = start_sample + samples_per_segment\n",
        "        segment = y[start_sample:end_sample]\n",
        "\n",
        "        # Convertir en bytes\n",
        "        buffer = BytesIO()\n",
        "        sf.write(buffer, segment, sr, format='wav')\n",
        "        buffer.seek(0)\n",
        "        segment_bytes = buffer.read()\n",
        "        segments.append(segment_bytes)\n",
        "\n",
        "    return segments\n"
      ],
      "metadata": {
        "id": "bve32cWSdAGZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#RECONNAISSANCE DE SEGMENTS AVEC SHAZAM (PREMIERE REUSSITE)\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)  # Reconnaître musique\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)  # Diviser en segments\n",
        "\n",
        "    for segment in segments:\n",
        "        track_info = await recognize_segment(segment)  # Reconnaître segment\n",
        "        if 'track' in track_info:  # Vérifier résultat\n",
        "            print(track_info['track']['title'])  # Afficher titre\n",
        "        else:\n",
        "            print(\"transition\")  # Segment sans identification\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')  # Exécuter reconnaissance\n",
        "\n",
        "await main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ojcSMrVcyCC",
        "outputId": "b58036e7-f408-4ed4-b896-9a3b18c79834"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/lib/python3.10/asyncio/events.py:80: DeprecationWarning: `run_cell_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  self._context.run(self._callback, *self._args)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chanson non reconnue ou structure de réponse inattendue.\n",
            "Universal Magnetic (Best of Decade I Version)\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Give It To Me Baby\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Don't Stop 'Til You Get Enough\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Still in the Groove\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "You're The One For Me (Remix)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Ai No Corrida (feat. Dune)\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "Don't Drop My Love\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "I Love the Nightlife (Disco 'Round)\n",
            "Chanson non reconnue ou structure de réponse inattendue.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE FINAL POUR DIVISER LE FICHIER DE BASE EN SEGMENTS DE 5 SECONDES\n",
        "import librosa\n",
        "import numpy as np\n",
        "import soundfile as sf\n",
        "from io import BytesIO\n",
        "\n",
        "def divide_mix_into_segments(file_path, segment_length=5):\n",
        "    #La je charge le fichier audio et je calcule la segmentation en gros\n",
        "    y, sr = librosa.load(file_path, sr=None)\n",
        "    samples_per_segment = segment_length * sr\n",
        "    total_segments = int(len(y) / samples_per_segment)\n",
        "    segments = []\n",
        "    #je découpe le signal audio en segments et je convertis en temps réel\n",
        "    for i in range(total_segments):\n",
        "        start_sample = i * samples_per_segment\n",
        "        end_sample = start_sample + samples_per_segment\n",
        "        segment = y[start_sample:end_sample]\n",
        "        start_time = librosa.samples_to_time(start_sample, sr=sr)\n",
        "\n",
        "        # Convertir le segment en tableau d'octets\n",
        "        buffer = BytesIO()\n",
        "        sf.write(buffer, segment, sr, format='wav')\n",
        "        buffer.seek(0)\n",
        "        segment_bytes = buffer.read()\n",
        "\n",
        "        segments.append((segment_bytes, start_time))\n",
        "\n",
        "    return segments"
      ],
      "metadata": {
        "id": "Osw_LmrigIO0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install shazamio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m3PWn5b62LGe",
        "outputId": "5f99868d-ed23-42dd-d5a7-f56fbfe45586"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting shazamio\n",
            "  Downloading shazamio-0.5.1-py3-none-any.whl (36 kB)\n",
            "Collecting aiofiles<23.0.0,>=22.1.0 (from shazamio)\n",
            "  Downloading aiofiles-22.1.0-py3-none-any.whl (14 kB)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.10/dist-packages (from shazamio) (3.9.3)\n",
            "Collecting aiohttp-retry<3.0.0,>=2.8.3 (from shazamio)\n",
            "  Downloading aiohttp_retry-2.8.3-py3-none-any.whl (9.8 kB)\n",
            "Requirement already satisfied: anyio<4.0.0,>=3.6.2 in /usr/local/lib/python3.10/dist-packages (from shazamio) (3.7.1)\n",
            "Collecting dataclass-factory==2.16 (from shazamio)\n",
            "  Downloading dataclass_factory-2.16-py3-none-any.whl (29 kB)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.24.0 in /usr/local/lib/python3.10/dist-packages (from shazamio) (1.25.2)\n",
            "Collecting pydantic<2.0.0,>=1.10.2 (from shazamio)\n",
            "  Downloading pydantic-1.10.15-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m10.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pydub<0.26.0,>=0.25.1 (from shazamio)\n",
            "  Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n",
            "Requirement already satisfied: pytest<8.0.0,>=7.2.0 in /usr/local/lib/python3.10/dist-packages (from shazamio) (7.4.4)\n",
            "Collecting pytest-asyncio<0.21.0,>=0.20.3 (from shazamio)\n",
            "  Downloading pytest_asyncio-0.20.3-py3-none-any.whl (12 kB)\n",
            "Collecting shazamio-core<2.0.0,>=1.0.7 (from shazamio)\n",
            "  Downloading shazamio_core-1.0.7-cp310-cp310-manylinux_2_28_x86_64.whl (2.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m20.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (1.3.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (23.2.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (1.4.1)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (6.0.5)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (1.9.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->shazamio) (4.0.3)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<4.0.0,>=3.6.2->shazamio) (3.6)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4.0.0,>=3.6.2->shazamio) (1.3.1)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4.0.0,>=3.6.2->shazamio) (1.2.0)\n",
            "Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<2.0.0,>=1.10.2->shazamio) (4.11.0)\n",
            "Requirement already satisfied: iniconfig in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (2.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (24.0)\n",
            "Requirement already satisfied: pluggy<2.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (1.4.0)\n",
            "Requirement already satisfied: tomli>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pytest<8.0.0,>=7.2.0->shazamio) (2.0.1)\n",
            "Installing collected packages: pydub, shazamio-core, pydantic, dataclass-factory, aiofiles, pytest-asyncio, aiohttp-retry, shazamio\n",
            "  Attempting uninstall: pydantic\n",
            "    Found existing installation: pydantic 2.6.4\n",
            "    Uninstalling pydantic-2.6.4:\n",
            "      Successfully uninstalled pydantic-2.6.4\n",
            "Successfully installed aiofiles-22.1.0 aiohttp-retry-2.8.3 dataclass-factory-2.16 pydantic-1.10.15 pydub-0.25.1 pytest-asyncio-0.20.3 shazamio-0.5.1 shazamio-core-1.0.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE RECONNAISSANCE SEGMENT\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            print(f\"{start_time}s: {track_info['track']['title']}\")\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "NZamGK16gGbN",
        "outputId": "80aa8553-73d5-49a8-d9e3-091d09572151"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0s: Chanson non reconnue ou transition\n",
            "5.0s: Universal Magnetic (Best of Decade I Version)\n",
            "10.0s: Give It To Me Baby\n",
            "15.0s: Give It To Me Baby\n",
            "20.0s: Give It To Me Baby\n",
            "25.0s: Give It To Me Baby\n",
            "30.0s: Give It To Me Baby\n",
            "35.0s: Give It To Me Baby\n",
            "40.0s: Give It To Me Baby\n",
            "45.0s: Give It To Me Baby\n",
            "50.0s: Give It To Me Baby\n",
            "55.0s: Give It To Me Baby\n",
            "60.0s: Give It To Me Baby\n",
            "65.0s: Give It To Me Baby\n",
            "70.0s: Give It To Me Baby\n",
            "75.0s: Give It To Me Baby\n",
            "80.0s: Give It To Me Baby\n",
            "85.0s: Give It To Me Baby\n",
            "90.0s: Give It To Me Baby\n",
            "95.0s: Give It To Me Baby\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-eafe572fa18c>\u001b[0m in \u001b[0;36m<cell line: 22>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-6-eafe572fa18c>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-eafe572fa18c>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{start_time}s: {track_info['track']['title']}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-eafe572fa18c>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST AJOUT LISTE\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    song_list = []  # liste\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            song_info = f\"{start_time}s: {track_info['track']['title']}\"\n",
        "            print(song_info)\n",
        "            song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "        else:\n",
        "            song_info = f\"{start_time}s: Chanson non reconnue ou transition\"\n",
        "            print(song_info)\n",
        "            song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "\n",
        "    return song_list  # Retourner la liste des chansons et des temps\n",
        "\n",
        "async def main():\n",
        "    song_list = await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "    for song in song_list:\n",
        "        print(song)\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4pyTw4hQkbtA",
        "outputId": "9a837508-b4ad-42fb-d82c-12ce4adbc580"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0s: Chanson non reconnue ou transition\n",
            "5.0s: Universal Magnetic (Best of Decade I Version)\n",
            "10.0s: Give It To Me Baby\n",
            "15.0s: Give It To Me Baby\n",
            "20.0s: Give It To Me Baby\n",
            "25.0s: Give It To Me Baby\n",
            "30.0s: Give It To Me Baby\n",
            "35.0s: Give It To Me Baby\n",
            "40.0s: Give It To Me Baby\n",
            "45.0s: Give It To Me Baby\n",
            "50.0s: Give It To Me Baby\n",
            "55.0s: Give It To Me Baby\n",
            "60.0s: Give It To Me Baby\n",
            "65.0s: Give It To Me Baby\n",
            "70.0s: Give It To Me Baby\n",
            "75.0s: Give It To Me Baby\n",
            "80.0s: Give It To Me Baby\n",
            "85.0s: Give It To Me Baby\n",
            "90.0s: Give It To Me Baby\n",
            "95.0s: Give It To Me Baby\n",
            "100.0s: Give It To Me Baby\n",
            "105.0s: Give It To Me Baby\n",
            "110.0s: Give It To Me Baby\n",
            "115.0s: Don't Stop 'Til You Get Enough\n",
            "120.0s: Don't Stop 'Til You Get Enough\n",
            "125.0s: Don't Stop 'Til You Get Enough\n",
            "130.0s: Don't Stop 'Til You Get Enough\n",
            "135.0s: Don't Stop 'Til You Get Enough\n",
            "140.0s: Don't Stop 'Til You Get Enough\n",
            "145.0s: Don't Stop 'Til You Get Enough\n",
            "150.0s: Don't Stop 'Til You Get Enough\n",
            "155.0s: Don't Stop 'Til You Get Enough\n",
            "160.0s: Don't Stop 'Til You Get Enough\n",
            "165.0s: Don't Stop 'Til You Get Enough\n",
            "170.0s: Don't Stop 'Til You Get Enough\n",
            "175.0s: Don't Stop 'Til You Get Enough\n",
            "180.0s: Don't Stop 'Til You Get Enough\n",
            "185.0s: Don't Stop 'Til You Get Enough\n",
            "190.0s: Don't Stop 'Til You Get Enough\n",
            "195.0s: Still in the Groove\n",
            "200.0s: Still in the Groove\n",
            "205.0s: Still in the Groove\n",
            "210.0s: Still in the Groove\n",
            "215.0s: Still in the Groove\n",
            "220.0s: Still in the Groove\n",
            "225.0s: Still in the Groove\n",
            "230.0s: Still in the Groove\n",
            "235.0s: Still in the Groove\n",
            "240.0s: Still in the Groove\n",
            "245.0s: Still in the Groove\n",
            "250.0s: Still in the Groove\n",
            "255.0s: Still in the Groove\n",
            "260.0s: Still in the Groove\n",
            "265.0s: Still in the Groove\n",
            "270.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "275.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "280.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "285.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "290.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "295.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "300.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "305.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "310.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "315.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "320.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "325.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "330.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "335.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "340.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "345.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "350.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "355.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "360.0s: You're The One For Me (Remix)\n",
            "365.0s: You're The One For Me (Remix)\n",
            "370.0s: You're The One For Me (Remix)\n",
            "375.0s: You're The One For Me (Remix)\n",
            "380.0s: You're The One For Me (Remix)\n",
            "385.0s: You're The One For Me (Remix)\n",
            "390.0s: You're The One For Me (Remix)\n",
            "395.0s: You're The One For Me (Remix)\n",
            "400.0s: You're The One For Me (Remix)\n",
            "405.0s: You're The One For Me (Remix)\n",
            "410.0s: You're The One For Me (Remix)\n",
            "415.0s: You're The One For Me (Remix)\n",
            "420.0s: You're The One For Me (Remix)\n",
            "425.0s: You're The One For Me (Remix)\n",
            "430.0s: You're The One For Me (Remix)\n",
            "435.0s: You're The One For Me (Remix)\n",
            "440.0s: You're The One For Me (Remix)\n",
            "445.0s: You're The One For Me (Remix)\n",
            "450.0s: Ai No Corrida (feat. Dune)\n",
            "455.0s: Ai No Corrida (feat. Dune)\n",
            "460.0s: Ai No Corrida (feat. Dune)\n",
            "465.0s: Ai No Corrida (feat. Dune)\n",
            "470.0s: Ai No Corrida (feat. Dune)\n",
            "475.0s: Ai No Corrida (feat. Dune)\n",
            "480.0s: Ai No Corrida (feat. Dune)\n",
            "485.0s: Ai No Corrida (feat. Dune)\n",
            "490.0s: Ai No Corrida (feat. Dune)\n",
            "495.0s: Ai No Corrida (feat. Dune)\n",
            "500.0s: Ai No Corrida (feat. Dune)\n",
            "505.0s: Ai No Corrida (feat. Dune)\n",
            "510.0s: Ai No Corrida (feat. Dune)\n",
            "515.0s: Don't Drop My Love\n",
            "520.0s: Don't Drop My Love\n",
            "525.0s: Don't Drop My Love\n",
            "530.0s: Don't Drop My Love\n",
            "535.0s: Don't Drop My Love\n",
            "540.0s: Don't Drop My Love\n",
            "545.0s: Don't Drop My Love\n",
            "550.0s: Don't Drop My Love\n",
            "555.0s: Don't Drop My Love\n",
            "560.0s: I Love the Nightlife (Disco 'Round)\n",
            "565.0s: I Love the Nightlife (Disco 'Round)\n",
            "570.0s: I Love the Nightlife (Disco 'Round)\n",
            "575.0s: I Love the Nightlife (Disco 'Round)\n",
            "580.0s: I Love the Nightlife (Disco 'Round)\n",
            "585.0s: I Love the Nightlife (Disco 'Round)\n",
            "590.0s: I Love the Nightlife (Disco 'Round)\n",
            "595.0s: I Love the Nightlife (Disco 'Round)\n",
            "600.0s: I Love the Nightlife (Disco 'Round)\n",
            "605.0s: I Love the Nightlife (Disco 'Round)\n",
            "610.0s: I Love the Nightlife (Disco 'Round)\n",
            "615.0s: I Love the Nightlife (Disco 'Round)\n",
            "620.0s: I Love the Nightlife (Disco 'Round)\n",
            "625.0s: I Love the Nightlife (Disco 'Round)\n",
            "Liste des chansons et des temps :\n",
            "0.0s: Chanson non reconnue ou transition\n",
            "5.0s: Universal Magnetic (Best of Decade I Version)\n",
            "10.0s: Give It To Me Baby\n",
            "15.0s: Give It To Me Baby\n",
            "20.0s: Give It To Me Baby\n",
            "25.0s: Give It To Me Baby\n",
            "30.0s: Give It To Me Baby\n",
            "35.0s: Give It To Me Baby\n",
            "40.0s: Give It To Me Baby\n",
            "45.0s: Give It To Me Baby\n",
            "50.0s: Give It To Me Baby\n",
            "55.0s: Give It To Me Baby\n",
            "60.0s: Give It To Me Baby\n",
            "65.0s: Give It To Me Baby\n",
            "70.0s: Give It To Me Baby\n",
            "75.0s: Give It To Me Baby\n",
            "80.0s: Give It To Me Baby\n",
            "85.0s: Give It To Me Baby\n",
            "90.0s: Give It To Me Baby\n",
            "95.0s: Give It To Me Baby\n",
            "100.0s: Give It To Me Baby\n",
            "105.0s: Give It To Me Baby\n",
            "110.0s: Give It To Me Baby\n",
            "115.0s: Don't Stop 'Til You Get Enough\n",
            "120.0s: Don't Stop 'Til You Get Enough\n",
            "125.0s: Don't Stop 'Til You Get Enough\n",
            "130.0s: Don't Stop 'Til You Get Enough\n",
            "135.0s: Don't Stop 'Til You Get Enough\n",
            "140.0s: Don't Stop 'Til You Get Enough\n",
            "145.0s: Don't Stop 'Til You Get Enough\n",
            "150.0s: Don't Stop 'Til You Get Enough\n",
            "155.0s: Don't Stop 'Til You Get Enough\n",
            "160.0s: Don't Stop 'Til You Get Enough\n",
            "165.0s: Don't Stop 'Til You Get Enough\n",
            "170.0s: Don't Stop 'Til You Get Enough\n",
            "175.0s: Don't Stop 'Til You Get Enough\n",
            "180.0s: Don't Stop 'Til You Get Enough\n",
            "185.0s: Don't Stop 'Til You Get Enough\n",
            "190.0s: Don't Stop 'Til You Get Enough\n",
            "195.0s: Still in the Groove\n",
            "200.0s: Still in the Groove\n",
            "205.0s: Still in the Groove\n",
            "210.0s: Still in the Groove\n",
            "215.0s: Still in the Groove\n",
            "220.0s: Still in the Groove\n",
            "225.0s: Still in the Groove\n",
            "230.0s: Still in the Groove\n",
            "235.0s: Still in the Groove\n",
            "240.0s: Still in the Groove\n",
            "245.0s: Still in the Groove\n",
            "250.0s: Still in the Groove\n",
            "255.0s: Still in the Groove\n",
            "260.0s: Still in the Groove\n",
            "265.0s: Still in the Groove\n",
            "270.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "275.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "280.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "285.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "290.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "295.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "300.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "305.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "310.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "315.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "320.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "325.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "330.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "335.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "340.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "345.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "350.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "355.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "360.0s: You're The One For Me (Remix)\n",
            "365.0s: You're The One For Me (Remix)\n",
            "370.0s: You're The One For Me (Remix)\n",
            "375.0s: You're The One For Me (Remix)\n",
            "380.0s: You're The One For Me (Remix)\n",
            "385.0s: You're The One For Me (Remix)\n",
            "390.0s: You're The One For Me (Remix)\n",
            "395.0s: You're The One For Me (Remix)\n",
            "400.0s: You're The One For Me (Remix)\n",
            "405.0s: You're The One For Me (Remix)\n",
            "410.0s: You're The One For Me (Remix)\n",
            "415.0s: You're The One For Me (Remix)\n",
            "420.0s: You're The One For Me (Remix)\n",
            "425.0s: You're The One For Me (Remix)\n",
            "430.0s: You're The One For Me (Remix)\n",
            "435.0s: You're The One For Me (Remix)\n",
            "440.0s: You're The One For Me (Remix)\n",
            "445.0s: You're The One For Me (Remix)\n",
            "450.0s: Ai No Corrida (feat. Dune)\n",
            "455.0s: Ai No Corrida (feat. Dune)\n",
            "460.0s: Ai No Corrida (feat. Dune)\n",
            "465.0s: Ai No Corrida (feat. Dune)\n",
            "470.0s: Ai No Corrida (feat. Dune)\n",
            "475.0s: Ai No Corrida (feat. Dune)\n",
            "480.0s: Ai No Corrida (feat. Dune)\n",
            "485.0s: Ai No Corrida (feat. Dune)\n",
            "490.0s: Ai No Corrida (feat. Dune)\n",
            "495.0s: Ai No Corrida (feat. Dune)\n",
            "500.0s: Ai No Corrida (feat. Dune)\n",
            "505.0s: Ai No Corrida (feat. Dune)\n",
            "510.0s: Ai No Corrida (feat. Dune)\n",
            "515.0s: Don't Drop My Love\n",
            "520.0s: Don't Drop My Love\n",
            "525.0s: Don't Drop My Love\n",
            "530.0s: Don't Drop My Love\n",
            "535.0s: Don't Drop My Love\n",
            "540.0s: Don't Drop My Love\n",
            "545.0s: Don't Drop My Love\n",
            "550.0s: Don't Drop My Love\n",
            "555.0s: Don't Drop My Love\n",
            "560.0s: I Love the Nightlife (Disco 'Round)\n",
            "565.0s: I Love the Nightlife (Disco 'Round)\n",
            "570.0s: I Love the Nightlife (Disco 'Round)\n",
            "575.0s: I Love the Nightlife (Disco 'Round)\n",
            "580.0s: I Love the Nightlife (Disco 'Round)\n",
            "585.0s: I Love the Nightlife (Disco 'Round)\n",
            "590.0s: I Love the Nightlife (Disco 'Round)\n",
            "595.0s: I Love the Nightlife (Disco 'Round)\n",
            "600.0s: I Love the Nightlife (Disco 'Round)\n",
            "605.0s: I Love the Nightlife (Disco 'Round)\n",
            "610.0s: I Love the Nightlife (Disco 'Round)\n",
            "615.0s: I Love the Nightlife (Disco 'Round)\n",
            "620.0s: I Love the Nightlife (Disco 'Round)\n",
            "625.0s: I Love the Nightlife (Disco 'Round)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST LISTE 2\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    song_list = []  # liste\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            song_info = f\"{start_time}s: {track_info['track']['title']}\"\n",
        "            song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "        else:\n",
        "            song_info = f\"{start_time}s: Chanson non reconnue ou transition\"\n",
        "            song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "\n",
        "    return song_list  # Retourner la liste des chansons et des temps\n",
        "\n",
        "async def main():\n",
        "    return await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "# Exécuter la coroutine main et attendre son résultat\n",
        "song_list = await main()\n",
        "\n",
        "print(song_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "TOEUzdE1ov-1",
        "outputId": "0a8aa228-6790-4275-e8ee-0e883dbcccb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-ccd0a6b60ae1>\u001b[0m in \u001b[0;36m<cell line: 29>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;31m# Exécuter la coroutine main et attendre son résultat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m \u001b[0msong_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;31m# Maintenant, song_list est accessible ici et vous pouvez l'imprimer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-13-ccd0a6b60ae1>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;31m# Exécuter la coroutine main et attendre son résultat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-13-ccd0a6b60ae1>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0msong_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{start_time}s: {track_info['track']['title']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-13-ccd0a6b60ae1>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST LISTE 3\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    song_list = []  # liste\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            song_info = f\"{start_time}s: {track_info['track']['title']}\"\n",
        "            song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "        else:\n",
        "            song_info = f\"{start_time}s: Chanson non reconnue ou transition\"\n",
        "            song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "\n",
        "    return song_list  # Retourner la liste des chansons et des temps\n",
        "\n",
        "async def main():\n",
        "    # Retourner la liste des chansons de la fonction\n",
        "    return await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "# Exécuter la coroutine main et attendre son résultat\n",
        "song_list = await main()\n",
        "\n",
        "print(\"Liste finale des chansons:\")\n",
        "for song in song_list:\n",
        "    print(song)"
      ],
      "metadata": {
        "id": "zqvdZyG8pBVf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "outputId": "271b1c98-6aa2-4cab-9472-698429850d8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-1c180f6b76d0>\u001b[0m in \u001b[0;36m<cell line: 30>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;31m# Exécuter la coroutine main et attendre son résultat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m \u001b[0msong_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;31m# song_list est maintenant accessible ici, et vous pouvez l'imprimer ou l'utiliser comme souhaité\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-1c180f6b76d0>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0;31m# Retourner la liste des chansons de la fonction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;31m# Exécuter la coroutine main et attendre son résultat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-1c180f6b76d0>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0msong_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{start_time}s: {track_info['track']['title']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-1c180f6b76d0>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST LISTE 4 + DETECTION TRANSITION\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    song_list = []  # Liste pour stocker les informations des chansons\n",
        "    last_song = None  # Garder une trace de la dernière chanson reconnue\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_song = track_info['track']['title']\n",
        "            if current_song != last_song:  # Vérifier si la chanson a changé\n",
        "                song_info = f\"{start_time}s: {current_song}\"\n",
        "                song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "                last_song = current_song  # Mettre à jour la dernière chanson reconnue\n",
        "        else:\n",
        "            if last_song is not None:  # Vérifier si c'est une transition après une chanson reconnue\n",
        "                song_info = f\"{start_time}s: Chanson non reconnue ou transition\"\n",
        "                song_list.append(song_info)  # Ajouter l'information à la liste\n",
        "                last_song = None  # Réinitialiser la dernière chanson reconnue\n",
        "\n",
        "    return song_list  # Retourner la liste des chansons et des temps\n",
        "\n",
        "async def main():\n",
        "    song_list = await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "    for song in song_list:\n",
        "        print(song)  # Affiche chaque élément de la liste\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "bGZ2Q8Bdlq0O",
        "outputId": "c85dbaab-0cfe-41ff-a42c-91f70e89b021"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-68cba44a6cd6>\u001b[0m in \u001b[0;36m<cell line: 35>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msong\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Affiche chaque élément de la liste\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-12-68cba44a6cd6>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m     \u001b[0msong_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msong\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msong_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msong\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Affiche chaque élément de la liste\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-12-68cba44a6cd6>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0mcurrent_song\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-12-68cba44a6cd6>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST LISTE 5 + DETECTION TRANSITION\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    last_track_title = None  # Stocke le titre de la piste du dernier segment\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "\n",
        "            # Si le titre de la piste actuelle est différent du dernier, cela indique un changement de musique\n",
        "            if last_track_title and current_track_title != last_track_title:\n",
        "                print(f\"Transition détectée de '{last_track_title-12}' à '{last_track_title+8}'\")\n",
        "\n",
        "            print(f\"{start_time}s: {current_track_title}\")\n",
        "            last_track_title = current_track_title  # Mettre à jour le dernier titre de piste pour la prochaine comparaison\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "UEyj6PWV3tYu",
        "outputId": "027fa68a-9913-4353-f5eb-80011e4cebe8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0s: Chanson non reconnue ou transition\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-8250b27efea1>\u001b[0m in \u001b[0;36m<cell line: 30>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-16-8250b27efea1>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-16-8250b27efea1>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0mcurrent_track_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-16-8250b27efea1>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST 6 DETECTION TRANSITION + LISTE\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    last_track_title = None\n",
        "    transitions = []  # Liste\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "\n",
        "            # Détecter un changement de musique\n",
        "            if last_track_title and current_track_title != last_track_title:\n",
        "                adjusted_start_time = max(0, start_time - 12)  # le temps de début n'est pas négatif\n",
        "                adjusted_end_time = start_time + 8  # Ajouter 8 secondes au point de changement pour la fin de la transition\n",
        "                transitions.append((adjusted_start_time, adjusted_end_time))\n",
        "\n",
        "                print(f\"Transition détectée à {start_time}s: de '{last_track_title}' à '{current_track_title}'\")\n",
        "\n",
        "            print(f\"{start_time}s: {current_track_title}\")\n",
        "            last_track_title = current_track_title\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "    return transitions\n",
        "\n",
        "async def main():\n",
        "    transitions = await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "    print(\"Transitions avec temps ajustés :\", transitions)\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "IN6xX07z55rG",
        "outputId": "cc4eb422-e08c-43b8-c7cb-ef5ebffdc7fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-1a88f2594621>\u001b[0m in \u001b[0;36m<cell line: 39>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Transitions avec temps ajustés :\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransitions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-10-1a88f2594621>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m     \u001b[0mtransitions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Transitions avec temps ajustés :\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransitions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-10-1a88f2594621>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0mcurrent_track_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-10-1a88f2594621>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST 7 DETECTION TRANSITION + LISTE\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    songs = []  # Liste pour stocker les morceaux de musique\n",
        "    transitions = []  # Liste pour stocker les transitions\n",
        "\n",
        "    previous_track = None  # Piste précédente pour la comparaison\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            track_title = track_info['track']['title']\n",
        "            if previous_track and track_title != previous_track[0]:\n",
        "                end_time = previous_track[1] - 8  # Soustraire 8s à la fin de la chanson précédente\n",
        "                transitions.append((previous_track[0], previous_track[1], start_time + 12))  # Ajouter 12s au début de la nouvelle chanson\n",
        "                songs.append((previous_track[0], previous_track[2], end_time))  # Mettre à jour la chanson précédente avec le nouveau temps de fin\n",
        "\n",
        "            previous_track = (track_title, start_time, start_time)  # Mettre à jour la piste précédente\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "    # Ajouter la dernière piste à la liste des chansons si elle n'est pas déjà là\n",
        "    if previous_track and (not songs or songs[-1][0] != previous_track[0]):\n",
        "        songs.append(previous_track)\n",
        "\n",
        "    # Affichage des résultats\n",
        "    print(\"Musiques sans transitions:\")\n",
        "    for song in songs:\n",
        "        print(song)\n",
        "    print(\"\\nTransitions:\")\n",
        "    for transition in transitions:\n",
        "        print(transition)\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "pSBmK8jX71UV",
        "outputId": "78a30657-4dc9-4845-a417-480a8c51b579"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-69fb2ab70858>\u001b[0m in \u001b[0;36m<cell line: 44>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-17-69fb2ab70858>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-17-69fb2ab70858>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mprevious_track\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# Piste précédente pour la comparaison\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0mtrack_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-17-69fb2ab70858>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST 8 DETECTION TRANSITION + LISTE(PREMIERE REELLE REUSSITE)\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    songs_timecodes = []  # Liste pour stocker les timecodes des morceaux de musique\n",
        "    transitions_timecodes = []  # Liste pour stocker les timecodes des transitions\n",
        "\n",
        "    previous_track_title = None\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "\n",
        "            # Si c'est le premier segment ou si le morceau actuel est le même que le précédent, continuer\n",
        "            if not previous_track_title or current_track_title == previous_track_title:\n",
        "                previous_track_title = current_track_title\n",
        "                if previous_track_start_time is None:\n",
        "                    previous_track_start_time = start_time\n",
        "                continue\n",
        "\n",
        "            # Transition détectée\n",
        "            transition_start = previous_track_start_time - 8\n",
        "            transition_end = start_time + 12\n",
        "            songs_timecodes.append((previous_track_start_time, transition_start))  # Fin du morceau précédent\n",
        "            transitions_timecodes.append((transition_start, transition_end))  # Transition\n",
        "\n",
        "            # Mise à jour pour le nouveau morceau\n",
        "            previous_track_title = current_track_title\n",
        "            previous_track_start_time = transition_end\n",
        "\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "    # Ajouter le dernier morceau si nécessaire\n",
        "    if previous_track_start_time is not None:\n",
        "        songs_timecodes.append((previous_track_start_time, segments[-1][1]))\n",
        "\n",
        "    # Affichage des résultats\n",
        "    print(\"Timecodes des transitions:\")\n",
        "    for start, end in songs_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "    print(\"\\nTimecodes des sons:\")\n",
        "    for start, end in transitions_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6iK6In559WJF",
        "outputId": "17991a2c-6c98-416c-d975-d7cd1174b47e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0s: Chanson non reconnue ou transition\n",
            "625.0s: Chanson non reconnue ou transition\n",
            "Timecodes des transitions:\n",
            "De 5.0s à -3.0s\n",
            "De 22.0s à 14.0s\n",
            "De 127.0s à 119.0s\n",
            "De 207.0s à 199.0s\n",
            "De 282.0s à 274.0s\n",
            "De 372.0s à 364.0s\n",
            "De 462.0s à 454.0s\n",
            "De 527.0s à 519.0s\n",
            "De 572.0s à 625.0s\n",
            "\n",
            "Timecodes des sons:\n",
            "De -3.0s à 22.0s\n",
            "De 14.0s à 127.0s\n",
            "De 119.0s à 207.0s\n",
            "De 199.0s à 282.0s\n",
            "De 274.0s à 372.0s\n",
            "De 364.0s à 462.0s\n",
            "De 454.0s à 527.0s\n",
            "De 519.0s à 572.0s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST 9\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    songs_timecodes = []  # Liste pour stocker les timecodes des morceaux de musique.\n",
        "    transitions_timecodes = []  # Liste pour stocker les timecodes des transitions.\n",
        "\n",
        "    previous_track_title = None\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "\n",
        "            if not previous_track_title or current_track_title == previous_track_title:\n",
        "                previous_track_title = current_track_title\n",
        "                if previous_track_start_time is None:\n",
        "                    previous_track_start_time = start_time\n",
        "                continue\n",
        "\n",
        "            transition_start = previous_track_start_time - 8\n",
        "            transition_end = start_time + 12\n",
        "            songs_timecodes.append((previous_track_start_time, transition_start))\n",
        "            transitions_timecodes.append((transition_start, transition_end))\n",
        "\n",
        "            previous_track_title = current_track_title\n",
        "            previous_track_start_time = transition_end\n",
        "\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "    if previous_track_start_time is not None:\n",
        "        songs_timecodes.append((previous_track_start_time, segments[-1][1]))\n",
        "\n",
        "    return songs_timecodes, transitions_timecodes  # Retourne les deux listes à la fin de la fonction.\n",
        "\n",
        "async def main():\n",
        "    songs_timecodes, transitions_timecodes = await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "    # Imprime les timecodes ici, dans la fonction main.\n",
        "    print(\"Timecodes des morceaux de musique :\")\n",
        "    for start, end in songs_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "    print(\"\\nTimecodes des transitions :\")\n",
        "    for start, end in transitions_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "fgjB8bJPBXcO",
        "outputId": "6513687a-03bd-41f5-b4a1-9e19eb1ee67b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0s: Chanson non reconnue ou transition\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-9b3b73738b22>\u001b[0m in \u001b[0;36m<cell line: 56>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     54\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"De {start}s à {end}s\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# S'assurer que cette ligne est à l'extérieur de toute fonction.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-30-9b3b73738b22>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m     \u001b[0msongs_timecodes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransitions_timecodes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0;31m# Imprime les timecodes ici, dans la fonction main.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-30-9b3b73738b22>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m             \u001b[0mcurrent_track_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-30-9b3b73738b22>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST 10 DEBUG POUR VOIR LE SOUCIS\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    print(f\"Nombre de segments : {len(segments)}\")  # Debug: Afficher le nombre de segments\n",
        "\n",
        "    songs_timecodes = []\n",
        "    transitions_timecodes = []\n",
        "\n",
        "    previous_track_title = None\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "            print(f\"Segment à {start_time}s: {current_track_title}\")  # Debug: Afficher le titre reconnu\n",
        "\n",
        "            if not previous_track_title or current_track_title == previous_track_title:\n",
        "                previous_track_title = current_track_title\n",
        "                if previous_track_start_time is None:\n",
        "                    previous_track_start_time = start_time\n",
        "                continue\n",
        "\n",
        "            transition_start = previous_track_start_time - 8\n",
        "            transition_end = start_time + 12\n",
        "            songs_timecodes.append((previous_track_start_time, transition_start))\n",
        "            transitions_timecodes.append((transition_start, transition_end))\n",
        "\n",
        "            previous_track_title = current_track_title\n",
        "            previous_track_start_time = transition_end\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")  # Debug: Indiquer les segments non reconnus\n",
        "\n",
        "    if previous_track_start_time is not None:\n",
        "        songs_timecodes.append((previous_track_start_time, segments[-1][1]))\n",
        "\n",
        "    return songs_timecodes, transitions_timecodes\n",
        "\n",
        "async def main():\n",
        "    songs_timecodes, transitions_timecodes = await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "    print(\"Timecodes des transitions :\")\n",
        "    for start, end in songs_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "    print(\"\\nTimecodes des sons :\")\n",
        "    for start, end in transitions_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "await main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "rUdQxOWshyEm",
        "outputId": "1f26a646-f2ba-4f84-aa13-536701cfe281"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'shazamio'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-9bdd5c74da99>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mshazamio\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'shazamio'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#RECONNAISSANCE DE SEGMENTS ET GESTION DES TRANSITIONS AVEC SHAZAM\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)  # Reconnaître segment\n",
        "    return track\n",
        "\n",
        "def divide_mix_into_segments(file_path, segment_length=5):\n",
        "    import librosa\n",
        "    import soundfile as sf\n",
        "    from io import BytesIO\n",
        "\n",
        "    # Charger audio\n",
        "    y, sr = librosa.load(file_path, sr=None)\n",
        "\n",
        "    # Echantillons par segment\n",
        "    samples_per_segment = segment_length * sr\n",
        "\n",
        "    # Calculer segments\n",
        "    total_segments = int(len(y) / samples_per_segment)\n",
        "\n",
        "    segments = []\n",
        "    for i in range(total_segments):\n",
        "        # Extraire segment\n",
        "        start_sample = i * samples_per_segment\n",
        "        end_sample = start_sample + samples_per_segment\n",
        "        segment = y[start_sample:end_sample]\n",
        "\n",
        "        # Convertir en bytes\n",
        "        buffer = BytesIO()\n",
        "        sf.write(buffer, segment, sr, format='wav')\n",
        "        buffer.seek(0)\n",
        "        segment_bytes = buffer.read()\n",
        "\n",
        "        # Temps de départ du segment\n",
        "        start_time = i * segment_length\n",
        "\n",
        "        segments.append((segment_bytes, start_time))\n",
        "\n",
        "    return segments\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)  # Diviser en segments\n",
        "\n",
        "    songs_timecodes = []\n",
        "    transitions_timecodes = []\n",
        "\n",
        "    previous_track_title = None\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)  # Reconnaître musique\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "\n",
        "            if not previous_track_title or current_track_title == previous_track_title:\n",
        "                previous_track_title = current_track_title\n",
        "                if previous_track_start_time is None:\n",
        "                    previous_track_start_time = start_time\n",
        "                continue\n",
        "\n",
        "            transition_start = previous_track_start_time - 8\n",
        "            transition_end = start_time + 12\n",
        "            songs_timecodes.append((previous_track_start_time, transition_start))\n",
        "            transitions_timecodes.append((transition_start, transition_end))\n",
        "\n",
        "            previous_track_title = current_track_title\n",
        "            previous_track_start_time = transition_end\n",
        "        else:\n",
        "            print(\"Transition ou non reconnu\")\n",
        "\n",
        "    if previous_track_start_time is not None:\n",
        "        songs_timecodes.append((previous_track_start_time, segments[-1][1]))\n",
        "\n",
        "    return songs_timecodes, transitions_timecodes\n",
        "\n",
        "async def main():\n",
        "    songs_timecodes, transitions_timecodes = await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "    print(\"Transitions :\")\n",
        "    for start, end in transitions_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "    print(\"\\nChansons :\")\n",
        "    for start, end in songs_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "await main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DfiFWSI5iRtd",
        "outputId": "8aaa57a0-1db6-4ec4-9c97-1ac5e0ff720f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre de segments : 126\n",
            "0.0s: Chanson non reconnue ou transition\n",
            "Segment à 5.0s: Universal Magnetic (Best of Decade I Version)\n",
            "Segment à 10.0s: Give It To Me Baby\n",
            "Segment à 15.0s: Give It To Me Baby\n",
            "Segment à 20.0s: Give It To Me Baby\n",
            "Segment à 25.0s: Give It To Me Baby\n",
            "Segment à 30.0s: Give It To Me Baby\n",
            "Segment à 35.0s: Give It To Me Baby\n",
            "Segment à 40.0s: Give It To Me Baby\n",
            "Segment à 45.0s: Give It To Me Baby\n",
            "Segment à 50.0s: Give It To Me Baby\n",
            "Segment à 55.0s: Give It To Me Baby\n",
            "Segment à 60.0s: Give It To Me Baby\n",
            "Segment à 65.0s: Give It To Me Baby\n",
            "Segment à 70.0s: Give It To Me Baby\n",
            "Segment à 75.0s: Give It To Me Baby\n",
            "Segment à 80.0s: Give It To Me Baby\n",
            "Segment à 85.0s: Give It To Me Baby\n",
            "Segment à 90.0s: Give It To Me Baby\n",
            "Segment à 95.0s: Give It To Me Baby\n",
            "Segment à 100.0s: Give It To Me Baby\n",
            "Segment à 105.0s: Give It To Me Baby\n",
            "Segment à 110.0s: Give It To Me Baby\n",
            "Segment à 115.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 120.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 125.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 130.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 135.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 140.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 145.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 150.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 155.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 160.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 165.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 170.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 175.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 180.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 185.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 190.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 195.0s: Still in the Groove\n",
            "Segment à 200.0s: Still in the Groove\n",
            "Segment à 205.0s: Still in the Groove\n",
            "Segment à 210.0s: Still in the Groove\n",
            "Segment à 215.0s: Still in the Groove\n",
            "Segment à 220.0s: Still in the Groove\n",
            "Segment à 225.0s: Still in the Groove\n",
            "Segment à 230.0s: Still in the Groove\n",
            "Segment à 235.0s: Still in the Groove\n",
            "Segment à 240.0s: Still in the Groove\n",
            "Segment à 245.0s: Still in the Groove\n",
            "Segment à 250.0s: Still in the Groove\n",
            "Segment à 255.0s: Still in the Groove\n",
            "Segment à 260.0s: Still in the Groove\n",
            "Segment à 265.0s: Still in the Groove\n",
            "Segment à 270.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 275.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 280.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 285.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 290.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 295.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 300.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 305.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 310.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 315.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 320.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 325.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 330.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 335.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 340.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 345.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 350.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 355.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 360.0s: You're The One For Me (Remix)\n",
            "Segment à 365.0s: You're The One For Me (Remix)\n",
            "Segment à 370.0s: You're The One For Me (Remix)\n",
            "Segment à 375.0s: You're The One For Me (Remix)\n",
            "Segment à 380.0s: You're The One For Me (Remix)\n",
            "Segment à 385.0s: You're The One For Me (Remix)\n",
            "Segment à 390.0s: You're The One For Me (Remix)\n",
            "Segment à 395.0s: You're The One For Me (Remix)\n",
            "Segment à 400.0s: You're The One For Me (Remix)\n",
            "Segment à 405.0s: You're The One For Me (Remix)\n",
            "Segment à 410.0s: You're The One For Me (Remix)\n",
            "Segment à 415.0s: You're The One For Me (Remix)\n",
            "Segment à 420.0s: You're The One For Me (Remix)\n",
            "Segment à 425.0s: You're The One For Me (Remix)\n",
            "Segment à 430.0s: You're The One For Me (Remix)\n",
            "Segment à 435.0s: You're The One For Me (Remix)\n",
            "Segment à 440.0s: You're The One For Me (Remix)\n",
            "Segment à 445.0s: You're The One For Me (Remix)\n",
            "Segment à 450.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 455.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 460.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 465.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 470.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 475.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 480.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 485.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 490.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 495.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 500.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 505.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 510.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 515.0s: Don't Drop My Love\n",
            "Segment à 520.0s: Don't Drop My Love\n",
            "Segment à 525.0s: Don't Drop My Love\n",
            "Segment à 530.0s: Don't Drop My Love\n",
            "Segment à 535.0s: Don't Drop My Love\n",
            "Segment à 540.0s: Don't Drop My Love\n",
            "Segment à 545.0s: Don't Drop My Love\n",
            "Segment à 550.0s: Don't Drop My Love\n",
            "Segment à 555.0s: Don't Drop My Love\n",
            "Segment à 560.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 565.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 570.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 575.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 580.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 585.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 590.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 595.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 600.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 605.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 610.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 615.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 620.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 625.0s: I Love the Nightlife (Disco 'Round)\n",
            "Timecodes des transitions :\n",
            "De 5.0s à -3.0s\n",
            "De 22.0s à 14.0s\n",
            "De 127.0s à 119.0s\n",
            "De 207.0s à 199.0s\n",
            "De 282.0s à 274.0s\n",
            "De 372.0s à 364.0s\n",
            "De 462.0s à 454.0s\n",
            "De 527.0s à 519.0s\n",
            "De 572.0s à 625.0s\n",
            "\n",
            "Timecodes des sons :\n",
            "De -3.0s à 22.0s\n",
            "De 14.0s à 127.0s\n",
            "De 119.0s à 207.0s\n",
            "De 199.0s à 282.0s\n",
            "De 274.0s à 372.0s\n",
            "De 364.0s à 462.0s\n",
            "De 454.0s à 527.0s\n",
            "De 519.0s à 572.0s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST 2\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    print(f\"Nombre de segments : {len(segments)}\")  # Debug: Afficher le nombre de segments\n",
        "\n",
        "    songs_timecodes = []\n",
        "    transitions_timecodes = []\n",
        "\n",
        "    previous_track_title = None\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "            print(f\"Segment à {start_time}s: {current_track_title}\")  # Debug: Afficher le titre reconnu\n",
        "\n",
        "            if not previous_track_title or current_track_title == previous_track_title:\n",
        "                previous_track_title = current_track_title\n",
        "                if previous_track_start_time is None:\n",
        "                    previous_track_start_time = start_time\n",
        "                continue\n",
        "\n",
        "            transition_start = previous_track_start_time - 8\n",
        "            transition_end = start_time + 12\n",
        "            songs_timecodes.append((previous_track_start_time, transition_start))\n",
        "            transitions_timecodes.append((transition_start, transition_end))\n",
        "\n",
        "            previous_track_title = current_track_title\n",
        "            previous_track_start_time = transition_end\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")  # Debug\n",
        "\n",
        "    if previous_track_start_time is not None:\n",
        "        songs_timecodes.append((previous_track_start_time, segments[-1][1]))\n",
        "\n",
        "    return songs_timecodes, transitions_timecodes\n",
        "\n",
        "async def main():\n",
        "    # Retourner les timecodes des chansons et des transitions de la fonction\n",
        "    return await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    songs_timecodes, transitions_timecodes = await main()\n",
        "\n",
        "    print(\"Timecodes des chansons :\")\n",
        "    for start, end in songs_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")\n",
        "\n",
        "    print(\"\\nTimecodes des transitions :\")\n",
        "    for start, end in transitions_timecodes:\n",
        "        print(f\"De {start}s à {end}s\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4RneUEhVQuG",
        "outputId": "300c9caa-2de0-4bd7-b4b4-92e2fba761f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre de segments : 126\n",
            "0.0s: Chanson non reconnue ou transition\n",
            "Segment à 5.0s: Universal Magnetic (Best of Decade I Version)\n",
            "Segment à 10.0s: Give It To Me Baby\n",
            "Segment à 15.0s: Give It To Me Baby\n",
            "Segment à 20.0s: Give It To Me Baby\n",
            "Segment à 25.0s: Give It To Me Baby\n",
            "Segment à 30.0s: Give It To Me Baby\n",
            "Segment à 35.0s: Give It To Me Baby\n",
            "Segment à 40.0s: Give It To Me Baby\n",
            "Segment à 45.0s: Give It To Me Baby\n",
            "Segment à 50.0s: Give It To Me Baby\n",
            "Segment à 55.0s: Give It To Me Baby\n",
            "Segment à 60.0s: Give It To Me Baby\n",
            "Segment à 65.0s: Give It To Me Baby\n",
            "Segment à 70.0s: Give It To Me Baby\n",
            "Segment à 75.0s: Give It To Me Baby\n",
            "Segment à 80.0s: Give It To Me Baby\n",
            "Segment à 85.0s: Give It To Me Baby\n",
            "Segment à 90.0s: Give It To Me Baby\n",
            "Segment à 95.0s: Give It To Me Baby\n",
            "Segment à 100.0s: Give It To Me Baby\n",
            "Segment à 105.0s: Give It To Me Baby\n",
            "Segment à 110.0s: Give It To Me Baby\n",
            "Segment à 115.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 120.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 125.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 130.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 135.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 140.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 145.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 150.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 155.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 160.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 165.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 170.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 175.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 180.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 185.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 190.0s: Don't Stop 'Til You Get Enough\n",
            "Segment à 195.0s: Still in the Groove\n",
            "Segment à 200.0s: Still in the Groove\n",
            "Segment à 205.0s: Still in the Groove\n",
            "Segment à 210.0s: Still in the Groove\n",
            "Segment à 215.0s: Still in the Groove\n",
            "Segment à 220.0s: Still in the Groove\n",
            "Segment à 225.0s: Still in the Groove\n",
            "Segment à 230.0s: Still in the Groove\n",
            "Segment à 235.0s: Still in the Groove\n",
            "Segment à 240.0s: Still in the Groove\n",
            "Segment à 245.0s: Still in the Groove\n",
            "Segment à 250.0s: Still in the Groove\n",
            "Segment à 255.0s: Still in the Groove\n",
            "Segment à 260.0s: Still in the Groove\n",
            "Segment à 265.0s: Still in the Groove\n",
            "Segment à 270.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 275.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 280.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 285.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 290.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 295.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 300.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 305.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 310.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 315.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 320.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 325.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 330.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 335.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 340.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 345.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 350.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 355.0s: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "Segment à 360.0s: You're The One For Me (Remix)\n",
            "Segment à 365.0s: You're The One For Me (Remix)\n",
            "Segment à 370.0s: You're The One For Me (Remix)\n",
            "Segment à 375.0s: You're The One For Me (Remix)\n",
            "Segment à 380.0s: You're The One For Me (Remix)\n",
            "Segment à 385.0s: You're The One For Me (Remix)\n",
            "Segment à 390.0s: You're The One For Me (Remix)\n",
            "Segment à 395.0s: You're The One For Me (Remix)\n",
            "Segment à 400.0s: You're The One For Me (Remix)\n",
            "Segment à 405.0s: You're The One For Me (Remix)\n",
            "Segment à 410.0s: You're The One For Me (Remix)\n",
            "Segment à 415.0s: You're The One For Me (Remix)\n",
            "Segment à 420.0s: You're The One For Me (Remix)\n",
            "Segment à 425.0s: You're The One For Me (Remix)\n",
            "Segment à 430.0s: You're The One For Me (Remix)\n",
            "Segment à 435.0s: You're The One For Me (Remix)\n",
            "Segment à 440.0s: You're The One For Me (Remix)\n",
            "Segment à 445.0s: You're The One For Me (Remix)\n",
            "Segment à 450.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 455.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 460.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 465.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 470.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 475.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 480.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 485.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 490.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 495.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 500.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 505.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 510.0s: Ai No Corrida (feat. Dune)\n",
            "Segment à 515.0s: Don't Drop My Love\n",
            "Segment à 520.0s: Don't Drop My Love\n",
            "Segment à 525.0s: Don't Drop My Love\n",
            "Segment à 530.0s: Don't Drop My Love\n",
            "Segment à 535.0s: Don't Drop My Love\n",
            "Segment à 540.0s: Don't Drop My Love\n",
            "Segment à 545.0s: Don't Drop My Love\n",
            "Segment à 550.0s: Don't Drop My Love\n",
            "Segment à 555.0s: Don't Drop My Love\n",
            "Segment à 560.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 565.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 570.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 575.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 580.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 585.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 590.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 595.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 600.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 605.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 610.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 615.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 620.0s: I Love the Nightlife (Disco 'Round)\n",
            "Segment à 625.0s: I Love the Nightlife (Disco 'Round)\n",
            "Timecodes des chansons :\n",
            "De 5.0s à -3.0s\n",
            "De 22.0s à 14.0s\n",
            "De 127.0s à 119.0s\n",
            "De 207.0s à 199.0s\n",
            "De 282.0s à 274.0s\n",
            "De 372.0s à 364.0s\n",
            "De 462.0s à 454.0s\n",
            "De 527.0s à 519.0s\n",
            "De 572.0s à 625.0s\n",
            "\n",
            "Timecodes des transitions :\n",
            "De -3.0s à 22.0s\n",
            "De 14.0s à 127.0s\n",
            "De 119.0s à 207.0s\n",
            "De 199.0s à 282.0s\n",
            "De 274.0s à 372.0s\n",
            "De 364.0s à 462.0s\n",
            "De 454.0s à 527.0s\n",
            "De 519.0s à 572.0s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST D'ACCESSIBILIT2 A LA LISTE\n",
        "print(transition_timecodes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "UDEnQJqvUgKB",
        "outputId": "91d2f8f9-1b39-4cb9-ecaa-7b72b9e654ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'transition_timecodes' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-14-9d1e7de3a458>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransition_timecodes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'transition_timecodes' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#RETOUR A LIBROSA MAIS ABANDON RAPIDE\n",
        "import numpy as np\n",
        "import librosa\n",
        "import soundfile as sf\n",
        "import os\n",
        "\n",
        "def divide_mix_into_segments(y, sr, n_fft, hop_length, window_size, threshold_multiplier):\n",
        "    D = np.abs(librosa.stft(y, n_fft=n_fft, hop_length=hop_length))\n",
        "    D_smooth = librosa.decompose.nn_filter(D, aggregate=np.median, metric='cosine')\n",
        "    diff = np.diff(D_smooth, axis=1)\n",
        "    diff_sum = np.sum(np.abs(diff), axis=0)\n",
        "    diff_sum_smooth = np.convolve(diff_sum, np.ones(window_size)/window_size, mode='same')\n",
        "    threshold = np.mean(diff_sum_smooth) + threshold_multiplier * np.std(diff_sum_smooth)\n",
        "    change_points = np.where(diff_sum_smooth > threshold)[0]\n",
        "    change_samples = librosa.frames_to_samples(change_points, hop_length=hop_length)\n",
        "    return [(start, end) for start, end in zip(change_samples, np.append(change_samples[1:], len(y)))]\n",
        "\n",
        "def save_segments(file_path, segments, sr, folder, prefix):\n",
        "    y, _ = librosa.load(file_path, sr=None)\n",
        "    for i, (start, end) in enumerate(segments):\n",
        "        segment_path = os.path.join(folder, f\"{prefix}_segment_{i}.wav\")\n",
        "        sf.write(segment_path, y[start:end], sr)\n",
        "\n",
        "# Paramètres à explorer\n",
        "n_ffts = [2048, 4096]\n",
        "hop_lengths = [512, 1024]\n",
        "window_sizes = [10, 20]\n",
        "threshold_multipliers = [1.5, 2.0]\n",
        "\n",
        "filename = '/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\n",
        "y, sr = librosa.load(filename, sr=None)\n",
        "\n",
        "for n_fft in n_ffts:\n",
        "    for hop_length in hop_lengths:\n",
        "        for window_size in window_sizes:\n",
        "            for threshold_multiplier in threshold_multipliers:\n",
        "                segments = divide_mix_into_segments(y, sr, n_fft, hop_length, window_size, threshold_multiplier)\n",
        "                prefix = f\"n_fft_{n_fft}_hop_{hop_length}_window_{window_size}_threshold_{threshold_multiplier}\"\n",
        "                save_segments(filename, segments, sr, '/content/drive/MyDrive/PROJET_SON/', prefix)\n",
        "\n",
        "print(\"Segmentation terminée pour tous les paramètres.\")"
      ],
      "metadata": {
        "id": "WSUkUDzro2WH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#ENCORE UN TEST AVEC LES LISTES\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    song_list = []\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            song_info = f\"{start_time}s: {track_info['track']['title']}\"\n",
        "            song_list.append(song_info)\n",
        "        else:\n",
        "            song_info = f\"{start_time}s: Chanson non reconnue ou transition\"\n",
        "            song_list.append(song_info)\n",
        "\n",
        "    return song_list\n",
        "\n",
        "async def main():\n",
        "\n",
        "    return await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "\n",
        "song_list = await main()\n",
        "\n",
        "\n",
        "print(\"Liste finale des chansons:\")\n",
        "for song in song_list:\n",
        "    print(song)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "sFOmZp50JByi",
        "outputId": "ee8125c5-50fb-48a9-cdb1-733fc7a2bcc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-1c180f6b76d0>\u001b[0m in \u001b[0;36m<cell line: 30>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;31m# Exécuter la coroutine main et attendre son résultat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m \u001b[0msong_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;31m# song_list est maintenant accessible ici, et vous pouvez l'imprimer ou l'utiliser comme souhaité\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-1c180f6b76d0>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0;31m# Retourner la liste des chansons de la fonction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;31m# Exécuter la coroutine main et attendre son résultat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-1c180f6b76d0>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0msong_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{start_time}s: {track_info['track']['title']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-1c180f6b76d0>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ENCORE DES TEST\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def produce_timecodes(segments, songs_timecodes_queue, transitions_timecodes_queue):\n",
        "    previous_track_title = None\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    for segment_bytes, start_time in segments:\n",
        "        track_info = await recognize_segment(segment_bytes)\n",
        "        if 'track' in track_info:\n",
        "            current_track_title = track_info['track']['title']\n",
        "\n",
        "            if not previous_track_title or current_track_title == previous_track_title:\n",
        "                previous_track_title = current_track_title\n",
        "                if previous_track_start_time is None:\n",
        "                    previous_track_start_time = start_time\n",
        "                continue\n",
        "\n",
        "            transition_start = previous_track_start_time - 8\n",
        "            transition_end = start_time + 12\n",
        "            await songs_timecodes_queue.put((previous_track_start_time, transition_start))\n",
        "            await transitions_timecodes_queue.put((transition_start, transition_end))\n",
        "\n",
        "            previous_track_title = current_track_title\n",
        "            previous_track_start_time = transition_end\n",
        "        else:\n",
        "            print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "    if previous_track_start_time is not None:\n",
        "        await songs_timecodes_queue.put((previous_track_start_time, segments[-1][1]))\n",
        "\n",
        "    # Signaler la fin de la production\n",
        "    await songs_timecodes_queue.put(None)\n",
        "    await transitions_timecodes_queue.put(None)\n",
        "\n",
        "async def consume_timecodes(queue, label):\n",
        "    while True:\n",
        "        timecode = await queue.get()\n",
        "        if timecode is None:\n",
        "            break  # Fin de la queue\n",
        "        print(f\"{label} de {timecode[0]}s à {timecode[1]}s\")\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "\n",
        "    songs_timecodes_queue = asyncio.Queue()\n",
        "    transitions_timecodes_queue = asyncio.Queue()\n",
        "\n",
        "    await produce_timecodes(segments, songs_timecodes_queue, transitions_timecodes_queue)\n",
        "\n",
        "    # Consommer les timecodes en parallèle pourrait se faire ici si nécessaire\n",
        "    await asyncio.gather(\n",
        "        consume_timecodes(songs_timecodes_queue, \"Timecode des chansons\"),\n",
        "        consume_timecodes(transitions_timecodes_queue, \"Timecode des transitions\")\n",
        "    )\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "# Exécuter la coroutine main\n",
        "if __name__ == \"__main__\":\n",
        "    await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "V1wHd3mztZ-x",
        "outputId": "8a1a9eef-987f-460e-d698-bf22b958f5d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0s: Chanson non reconnue ou transition\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-dcf2e4d2d392>\u001b[0m in \u001b[0;36m<cell line: 66>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;31m# Exécuter la coroutine main\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-9-dcf2e4d2d392>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;31m# Exécuter la coroutine main\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-9-dcf2e4d2d392>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mtransitions_timecodes_queue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mQueue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mproduce_timecodes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegments\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msongs_timecodes_queue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransitions_timecodes_queue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0;31m# Consommer les timecodes en parallèle pourrait se faire ici si nécessaire\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-9-dcf2e4d2d392>\u001b[0m in \u001b[0;36mproduce_timecodes\u001b[0;34m(segments, songs_timecodes_queue, transitions_timecodes_queue)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0mcurrent_track_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-9-dcf2e4d2d392>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#SCRIPT AMÉLIORÉ POUR LA RECONNAISSANCE DE MUSIQUE DANS DES SEGMENTS AUDIO\n",
        "from pydub import AudioSegment\n",
        "import asyncio\n",
        "import shazamio\n",
        "import os\n",
        "\n",
        "async def split_audio(file_path, duration):\n",
        "    # Charger fichier audio\n",
        "    audio = AudioSegment.from_file(file_path)\n",
        "\n",
        "    # Calculer durée totale en secondes\n",
        "    total_duration = len(audio) / 1000\n",
        "\n",
        "    segments_info = []\n",
        "\n",
        "    # Découper en segments\n",
        "    for i in range(0, int(total_duration * 1000), duration * 1000):\n",
        "        start_time = i / 1000\n",
        "        end_time = min((i + duration * 1000) / 1000, total_duration)\n",
        "        segment = audio[i:i + duration * 1000]\n",
        "\n",
        "        # Sauvegarder infos du segment\n",
        "        segments_info.append((start_time, end_time, segment))\n",
        "\n",
        "    return segments_info\n",
        "\n",
        "async def detect_music(segment_path):\n",
        "    # Initialiser client Shazam\n",
        "    shazam = shazamio.Shazam()\n",
        "\n",
        "    results = []\n",
        "\n",
        "    # Analyser avec Shazam\n",
        "    async with open(segment_path, 'rb') as f:\n",
        "        data = f.read()\n",
        "    matches = await shazam.recognize(data)\n",
        "\n",
        "    # Vérifier correspondance\n",
        "    if 'track' in matches and 'title' in matches['track'] and 'subtitle' in matches['track']:\n",
        "        music_detected = True\n",
        "        music_name = matches['track']['title']\n",
        "        artist_name = matches['track']['subtitle']\n",
        "    else:\n",
        "        music_detected = False\n",
        "        music_name = None\n",
        "        artist_name = None\n",
        "\n",
        "    results.append([music_detected, music_name, artist_name])\n",
        "\n",
        "    return results\n",
        "\n",
        "async def write_results_to_file(file_path, results, segments_info):\n",
        "    with open(file_path, 'w') as file:\n",
        "        for i, result in enumerate(results):\n",
        "            start_time, end_time, _ = segments_info[i]\n",
        "            time_range = f\"{start_time:.2f} - {end_time:.2f}\"\n",
        "            file.write(f\"{time_range} | Music: {result[1]} - Artist: {result[2]}\\n\")\n",
        "\n",
        "\n",
        "async def main():\n",
        "    # Chemin vers fichier audio\n",
        "    file_path = \"C:/Users/Martin/Documents/ISEN/M1/M1_Projet_2023_2024/S2/set.mp3\"\n",
        "    file_name = os.path.splitext(os.path.basename(file_path))[0]\n",
        "    segment_duration = 20\n",
        "\n",
        "    # Découper fichier audio\n",
        "    segments_info = await split_audio(file_path, segment_duration)\n",
        "\n",
        "    music_results = []\n",
        "\n",
        "    # Traiter chaque segment\n",
        "    for i, (start_time, end_time, segment) in enumerate(segments_info):\n",
        "        output_file = f\"{file_name}_segment_{i+1}.mp3\"\n",
        "        segment.export(output_file, format=\"mp3\")\n",
        "\n",
        "        # Détecter musique\n",
        "        results = await detect_music(output_file)\n",
        "        music_results.extend(results)\n",
        "\n",
        "    # Écrire résultats\n",
        "    output_file_name = f\"{file_name}_results.txt\"\n",
        "    await write_results_to_file(output_file_name, music_results, segments_info)\n",
        "\n",
        "# Exécuter le programme\n",
        "asyncio.run(main())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "mujxQPg9uWRx",
        "outputId": "211a7633-1d8e-48df-b81b-826afec6b178"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "asyncio.run() cannot be called from a running event loop",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-20829e02da15>\u001b[0m in \u001b[0;36m<cell line: 91>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;31m# Lancer l'exécution du programme principal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/runners.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(main, debug)\u001b[0m\n\u001b[1;32m     31\u001b[0m     \"\"\"\n\u001b[1;32m     32\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_running_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         raise RuntimeError(\n\u001b[0m\u001b[1;32m     34\u001b[0m             \"asyncio.run() cannot be called from a running event loop\")\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: asyncio.run() cannot be called from a running event loop"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "async def write_results_to_file(file_path, results, segments_info):\n",
        "    with open(file_path, 'w') as file:\n",
        "        for i, result in enumerate(results):\n",
        "            start_time, end_time, _ = segments_info[i]\n",
        "            time_range = f\"{start_time:.2f} - {end_time:.2f}\"\n",
        "            file.write(f\"{time_range} | Music: {result[1]} - Artist: {result[2]}\\n\")"
      ],
      "metadata": {
        "id": "4UXpoHbvsnsn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "await write_results_to_file(output_file_name, music_results, segments_info)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "u9qjhfmJJm9Y",
        "outputId": "625b2fbf-05ef-4b7d-88d1-4b5087b1d26c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'output_file_name' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-ab69a1bfedd7>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mawait\u001b[0m \u001b[0mwrite_results_to_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_file_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmusic_results\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msegments_info\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'output_file_name' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install aiofiles"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8DO6BjXPunt3",
        "outputId": "7cbce416-3986-4032-c646-82039c61136c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: aiofiles in /usr/local/lib/python3.10/dist-packages (22.1.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install asyncio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "id": "tt6v81z3uvti",
        "outputId": "e8c7dc13-cbf2-4978-81b8-26a91cbf4488"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting asyncio\n",
            "  Downloading asyncio-3.4.3-py3-none-any.whl (101 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m101.8/101.8 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: asyncio\n",
            "Successfully installed asyncio-3.4.3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "asyncio"
                ]
              },
              "id": "77137d13c3a24d2094d07dde2cfa23bb"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ECRITURE DANS UN FICHIER\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "import aiofiles\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "\n",
        "    previous_track_title = None\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    async with aiofiles.open('songs_timecodes.txt', mode='w') as songs_file, \\\n",
        "               aiofiles.open('transitions_timecodes.txt', mode='w') as transitions_file:\n",
        "\n",
        "        for segment_bytes, start_time in segments:\n",
        "            track_info = await recognize_segment(segment_bytes)\n",
        "            if 'track' in track_info:\n",
        "                current_track_title = track_info['track']['title']\n",
        "\n",
        "                if not previous_track_title or current_track_title == previous_track_title:\n",
        "                    previous_track_title = current_track_title\n",
        "                    if previous_track_start_time is None:\n",
        "                        previous_track_start_time = start_time\n",
        "                    continue\n",
        "\n",
        "                transition_start = previous_track_start_time - 8\n",
        "                transition_end = start_time + 12\n",
        "                await songs_file.write(f\"{previous_track_start_time}s à {transition_start}s\\n\")\n",
        "                await transitions_file.write(f\"{transition_start}s à {transition_end}s\\n\")\n",
        "\n",
        "                previous_track_title = current_track_title\n",
        "                previous_track_start_time = transition_end\n",
        "            else:\n",
        "                print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "        if previous_track_start_time is not None:\n",
        "            await songs_file.write(f\"{previous_track_start_time}s à {segments[-1][1]}s\\n\")\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "# Exécuter la coroutine main\n",
        "if __name__ == \"__main__\":\n",
        "    await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "gJzbmbESusqc",
        "outputId": "453bc4e6-9127-44a4-ea16-96b466ca005c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0s: Chanson non reconnue ou transition\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-a243539c7ad8>\u001b[0m in \u001b[0;36m<cell line: 47>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;31m# Exécuter la coroutine main\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-16-a243539c7ad8>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;31m# Exécuter la coroutine main\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-16-a243539c7ad8>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msegments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m             \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m                 \u001b[0mcurrent_track_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-16-a243539c7ad8>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TEST 2\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "import aiofiles\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    print(\"Début de recognize_song\")\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    print(f\"Segments divisés : {len(segments)}\")\n",
        "\n",
        "    previous_track_title = None  # Initialisation des variables avant la boucle\n",
        "    previous_track_start_time = None\n",
        "\n",
        "    async with aiofiles.open('transitions_timecodes.txt', 'w') as songs_file, \\\n",
        "               aiofiles.open('songs_timecodes.txt', 'w') as transitions_file:\n",
        "        for i, (segment_bytes, start_time) in enumerate(segments):\n",
        "            print(f\"Traitement du segment {i+1}/{len(segments)} à {start_time}s\")\n",
        "            track_info = await recognize_segment(segment_bytes)\n",
        "            if 'track' in track_info:\n",
        "                current_track_title = track_info['track']['title']\n",
        "\n",
        "                if not previous_track_title or current_track_title == previous_track_title:\n",
        "                    previous_track_title = current_track_title\n",
        "                    if previous_track_start_time is None:\n",
        "                        previous_track_start_time = start_time\n",
        "                    continue\n",
        "\n",
        "                transition_start = max(0, previous_track_start_time - 5)  # Éviter les valeurs négatives\n",
        "\n",
        "                transition_end = start_time\n",
        "                await songs_file.write(f\"De {previous_track_start_time}s à {transition_start}s\\n\")\n",
        "                await transitions_file.write(f\"De {transition_start}s à {transition_end}s\\n\")\n",
        "\n",
        "                previous_track_title = current_track_title\n",
        "                previous_track_start_time = transition_end\n",
        "            else:\n",
        "                print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "        if previous_track_start_time is not None:\n",
        "            await songs_file.write(f\"De {previous_track_start_time}s à {segments[-1][1]}s\\n\")\n",
        "\n",
        "    print(\"Fin de recognize_song\")\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    await main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PQz4eNcMviLf",
        "outputId": "4d7e5555-46b9-481c-f790-fec7bd2ac11b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Début de recognize_song\n",
            "Segments divisés : 126\n",
            "Traitement du segment 1/126 à 0.0s\n",
            "0.0s: Chanson non reconnue ou transition\n",
            "Traitement du segment 2/126 à 5.0s\n",
            "Traitement du segment 3/126 à 10.0s\n",
            "Traitement du segment 4/126 à 15.0s\n",
            "Traitement du segment 5/126 à 20.0s\n",
            "Traitement du segment 6/126 à 25.0s\n",
            "Traitement du segment 7/126 à 30.0s\n",
            "Traitement du segment 8/126 à 35.0s\n",
            "Traitement du segment 9/126 à 40.0s\n",
            "Traitement du segment 10/126 à 45.0s\n",
            "Traitement du segment 11/126 à 50.0s\n",
            "Traitement du segment 12/126 à 55.0s\n",
            "Traitement du segment 13/126 à 60.0s\n",
            "Traitement du segment 14/126 à 65.0s\n",
            "Traitement du segment 15/126 à 70.0s\n",
            "Traitement du segment 16/126 à 75.0s\n",
            "Traitement du segment 17/126 à 80.0s\n",
            "Traitement du segment 18/126 à 85.0s\n",
            "Traitement du segment 19/126 à 90.0s\n",
            "Traitement du segment 20/126 à 95.0s\n",
            "Traitement du segment 21/126 à 100.0s\n",
            "Traitement du segment 22/126 à 105.0s\n",
            "Traitement du segment 23/126 à 110.0s\n",
            "Traitement du segment 24/126 à 115.0s\n",
            "Traitement du segment 25/126 à 120.0s\n",
            "Traitement du segment 26/126 à 125.0s\n",
            "Traitement du segment 27/126 à 130.0s\n",
            "Traitement du segment 28/126 à 135.0s\n",
            "Traitement du segment 29/126 à 140.0s\n",
            "Traitement du segment 30/126 à 145.0s\n",
            "Traitement du segment 31/126 à 150.0s\n",
            "Traitement du segment 32/126 à 155.0s\n",
            "Traitement du segment 33/126 à 160.0s\n",
            "Traitement du segment 34/126 à 165.0s\n",
            "Traitement du segment 35/126 à 170.0s\n",
            "Traitement du segment 36/126 à 175.0s\n",
            "Traitement du segment 37/126 à 180.0s\n",
            "Traitement du segment 38/126 à 185.0s\n",
            "Traitement du segment 39/126 à 190.0s\n",
            "Traitement du segment 40/126 à 195.0s\n",
            "Traitement du segment 41/126 à 200.0s\n",
            "Traitement du segment 42/126 à 205.0s\n",
            "Traitement du segment 43/126 à 210.0s\n",
            "Traitement du segment 44/126 à 215.0s\n",
            "Traitement du segment 45/126 à 220.0s\n",
            "Traitement du segment 46/126 à 225.0s\n",
            "Traitement du segment 47/126 à 230.0s\n",
            "Traitement du segment 48/126 à 235.0s\n",
            "Traitement du segment 49/126 à 240.0s\n",
            "Traitement du segment 50/126 à 245.0s\n",
            "Traitement du segment 51/126 à 250.0s\n",
            "Traitement du segment 52/126 à 255.0s\n",
            "Traitement du segment 53/126 à 260.0s\n",
            "Traitement du segment 54/126 à 265.0s\n",
            "Traitement du segment 55/126 à 270.0s\n",
            "Traitement du segment 56/126 à 275.0s\n",
            "Traitement du segment 57/126 à 280.0s\n",
            "Traitement du segment 58/126 à 285.0s\n",
            "Traitement du segment 59/126 à 290.0s\n",
            "Traitement du segment 60/126 à 295.0s\n",
            "Traitement du segment 61/126 à 300.0s\n",
            "Traitement du segment 62/126 à 305.0s\n",
            "Traitement du segment 63/126 à 310.0s\n",
            "Traitement du segment 64/126 à 315.0s\n",
            "Traitement du segment 65/126 à 320.0s\n",
            "Traitement du segment 66/126 à 325.0s\n",
            "Traitement du segment 67/126 à 330.0s\n",
            "Traitement du segment 68/126 à 335.0s\n",
            "Traitement du segment 69/126 à 340.0s\n",
            "Traitement du segment 70/126 à 345.0s\n",
            "Traitement du segment 71/126 à 350.0s\n",
            "Traitement du segment 72/126 à 355.0s\n",
            "Traitement du segment 73/126 à 360.0s\n",
            "Traitement du segment 74/126 à 365.0s\n",
            "Traitement du segment 75/126 à 370.0s\n",
            "Traitement du segment 76/126 à 375.0s\n",
            "Traitement du segment 77/126 à 380.0s\n",
            "Traitement du segment 78/126 à 385.0s\n",
            "Traitement du segment 79/126 à 390.0s\n",
            "Traitement du segment 80/126 à 395.0s\n",
            "Traitement du segment 81/126 à 400.0s\n",
            "Traitement du segment 82/126 à 405.0s\n",
            "Traitement du segment 83/126 à 410.0s\n",
            "Traitement du segment 84/126 à 415.0s\n",
            "Traitement du segment 85/126 à 420.0s\n",
            "Traitement du segment 86/126 à 425.0s\n",
            "Traitement du segment 87/126 à 430.0s\n",
            "Traitement du segment 88/126 à 435.0s\n",
            "Traitement du segment 89/126 à 440.0s\n",
            "Traitement du segment 90/126 à 445.0s\n",
            "Traitement du segment 91/126 à 450.0s\n",
            "Traitement du segment 92/126 à 455.0s\n",
            "Traitement du segment 93/126 à 460.0s\n",
            "Traitement du segment 94/126 à 465.0s\n",
            "Traitement du segment 95/126 à 470.0s\n",
            "Traitement du segment 96/126 à 475.0s\n",
            "Traitement du segment 97/126 à 480.0s\n",
            "Traitement du segment 98/126 à 485.0s\n",
            "Traitement du segment 99/126 à 490.0s\n",
            "Traitement du segment 100/126 à 495.0s\n",
            "Traitement du segment 101/126 à 500.0s\n",
            "Traitement du segment 102/126 à 505.0s\n",
            "Traitement du segment 103/126 à 510.0s\n",
            "Traitement du segment 104/126 à 515.0s\n",
            "Traitement du segment 105/126 à 520.0s\n",
            "Traitement du segment 106/126 à 525.0s\n",
            "Traitement du segment 107/126 à 530.0s\n",
            "Traitement du segment 108/126 à 535.0s\n",
            "Traitement du segment 109/126 à 540.0s\n",
            "Traitement du segment 110/126 à 545.0s\n",
            "Traitement du segment 111/126 à 550.0s\n",
            "Traitement du segment 112/126 à 555.0s\n",
            "Traitement du segment 113/126 à 560.0s\n",
            "Traitement du segment 114/126 à 565.0s\n",
            "Traitement du segment 115/126 à 570.0s\n",
            "Traitement du segment 116/126 à 575.0s\n",
            "Traitement du segment 117/126 à 580.0s\n",
            "Traitement du segment 118/126 à 585.0s\n",
            "Traitement du segment 119/126 à 590.0s\n",
            "Traitement du segment 120/126 à 595.0s\n",
            "Traitement du segment 121/126 à 600.0s\n",
            "Traitement du segment 122/126 à 605.0s\n",
            "Traitement du segment 123/126 à 610.0s\n",
            "Traitement du segment 124/126 à 615.0s\n",
            "Traitement du segment 125/126 à 620.0s\n",
            "Traitement du segment 126/126 à 625.0s\n",
            "Fin de recognize_song\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST 3\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "import aiofiles\n",
        "\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "async def recognize_song(file_path):\n",
        "    print(\"Début de recognize_song\")\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    print(f\"Segments divisés : {len(segments)}\")\n",
        "\n",
        "    previous_track_title = None\n",
        "    song_start = None\n",
        "\n",
        "    async with aiofiles.open('songs_timecodes.txt', 'w') as songs_file, \\\n",
        "               aiofiles.open('transitions_timecodes.txt', 'w') as transitions_file:\n",
        "        for i, (segment_bytes, start_time) in enumerate(segments):\n",
        "            print(f\"Traitement du segment {i+1}/{len(segments)} à {start_time}s\")\n",
        "            track_info = await recognize_segment(segment_bytes)\n",
        "            if 'track' in track_info:\n",
        "                current_track_title = track_info['track']['title']\n",
        "\n",
        "                if previous_track_title is None:  # Première chanson\n",
        "                    previous_track_title = current_track_title\n",
        "                    song_start = start_time  # Marquer le début de la première chanson\n",
        "                elif current_track_title != previous_track_title:  # Changement de chanson détecté\n",
        "                    # Écrire le timecode de la chanson précédente\n",
        "                    await songs_file.write(f\"De {song_start}s à {start_time}s\\n\")\n",
        "\n",
        "                    # Marquer le début de la nouvelle chanson\n",
        "                    song_start = start_time\n",
        "                    previous_track_title = current_track_title\n",
        "            else:\n",
        "                print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "        # Écrire le timecode de la dernière chanson\n",
        "        if song_start is not None:\n",
        "            await songs_file.write(f\"De {song_start}s à {segments[-1][1]}s\\n\")\n",
        "\n",
        "    print(\"Fin de recognize_song\")\n",
        "\n",
        "\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ug7gGmxI2_q5",
        "outputId": "d997f1d7-aa00-45d1-b226-c35654719bed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Début de recognize_song\n",
            "Segments divisés : 126\n",
            "Traitement du segment 1/126 à 0.0s\n",
            "0.0s: Chanson non reconnue ou transition\n",
            "Traitement du segment 2/126 à 5.0s\n",
            "Traitement du segment 3/126 à 10.0s\n",
            "Traitement du segment 4/126 à 15.0s\n",
            "Traitement du segment 5/126 à 20.0s\n",
            "Traitement du segment 6/126 à 25.0s\n",
            "Traitement du segment 7/126 à 30.0s\n",
            "Traitement du segment 8/126 à 35.0s\n",
            "Traitement du segment 9/126 à 40.0s\n",
            "Traitement du segment 10/126 à 45.0s\n",
            "Traitement du segment 11/126 à 50.0s\n",
            "Traitement du segment 12/126 à 55.0s\n",
            "Traitement du segment 13/126 à 60.0s\n",
            "Traitement du segment 14/126 à 65.0s\n",
            "Traitement du segment 15/126 à 70.0s\n",
            "Traitement du segment 16/126 à 75.0s\n",
            "Traitement du segment 17/126 à 80.0s\n",
            "Traitement du segment 18/126 à 85.0s\n",
            "Traitement du segment 19/126 à 90.0s\n",
            "Traitement du segment 20/126 à 95.0s\n",
            "Traitement du segment 21/126 à 100.0s\n",
            "Traitement du segment 22/126 à 105.0s\n",
            "Traitement du segment 23/126 à 110.0s\n",
            "Traitement du segment 24/126 à 115.0s\n",
            "Traitement du segment 25/126 à 120.0s\n",
            "Traitement du segment 26/126 à 125.0s\n",
            "Traitement du segment 27/126 à 130.0s\n",
            "Traitement du segment 28/126 à 135.0s\n",
            "Traitement du segment 29/126 à 140.0s\n",
            "Traitement du segment 30/126 à 145.0s\n",
            "Traitement du segment 31/126 à 150.0s\n",
            "Traitement du segment 32/126 à 155.0s\n",
            "Traitement du segment 33/126 à 160.0s\n",
            "Traitement du segment 34/126 à 165.0s\n",
            "Traitement du segment 35/126 à 170.0s\n",
            "Traitement du segment 36/126 à 175.0s\n",
            "Traitement du segment 37/126 à 180.0s\n",
            "Traitement du segment 38/126 à 185.0s\n",
            "Traitement du segment 39/126 à 190.0s\n",
            "Traitement du segment 40/126 à 195.0s\n",
            "Traitement du segment 41/126 à 200.0s\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "CancelledError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mCancelledError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-cd53712b97b4>\u001b[0m in \u001b[0;36m<cell line: 50>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;31m# Exécuter la coroutine main\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-28-cd53712b97b4>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m     \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_song\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;31m# Exécuter la coroutine main\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-28-cd53712b97b4>\u001b[0m in \u001b[0;36mrecognize_song\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegments\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Traitement du segment {i+1}/{len(segments)} à {start_time}s\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m             \u001b[0mtrack_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msegment_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;34m'track'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m                 \u001b[0mcurrent_track_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'track'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-28-cd53712b97b4>\u001b[0m in \u001b[0;36mrecognize_segment\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecognize_segment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mshazam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mShazam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mtrack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mshazam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecognize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36mrecognize\u001b[0;34m(self, data, proxy)\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid data type\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_recognize_request_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     async def send_recognize_request_v2(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/api.py\u001b[0m in \u001b[0;36msend_recognize_request_v2\u001b[0;34m(self, sig, proxy)\u001b[0m\n\u001b[1;32m    551\u001b[0m             \u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         )\n\u001b[0;32m--> 553\u001b[0;31m         return await self.http_client.request(\n\u001b[0m\u001b[1;32m    554\u001b[0m             \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             ShazamUrl.SEARCH_FROM_FILE.format(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shazamio/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, *args, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 \u001b[0;32masync\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mvalidate_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m__aenter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32masync\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m__aenter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m     async def __aexit__(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/aiohttp_retry/client.py\u001b[0m in \u001b[0;36m_do_request\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mretry_wait\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retry_options\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattempt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurrent_attempt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0;32mawait\u001b[0m \u001b[0masyncio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretry_wait\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__await__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGenerator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClientResponse\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/asyncio/tasks.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(delay, result)\u001b[0m\n\u001b[1;32m    603\u001b[0m                         future, result)\n\u001b[1;32m    604\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mawait\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcancel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mCancelledError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE FINAL POUR RECONNAITRE LES SONS ET LES STOCKER DANS UN FICHIER TEXTE\n",
        "import asyncio\n",
        "from shazamio import Shazam\n",
        "import aiofiles\n",
        "\n",
        "# Fonction pour reconnaître un segment audio en utilisant Shazam\n",
        "async def recognize_segment(data):\n",
        "    shazam = Shazam()\n",
        "    track = await shazam.recognize(data)\n",
        "    return track\n",
        "\n",
        "# Fonction principale pour reconnaître les chansons dans un fichier audio long\n",
        "async def recognize_song(file_path):\n",
        "    print(\"Début de recognize_song\")\n",
        "    segments = divide_mix_into_segments(file_path)\n",
        "    print(f\"Segments divisés : {len(segments)}\")\n",
        "\n",
        "    recognized_songs = set()  # Utilisation d'un ensemble pour éviter les doublons\n",
        "\n",
        "    # Ouverture du fichier pour enregistrer les titres de chansons reconnus\n",
        "    async with aiofiles.open('songs_list.txt', 'w') as songs_file:\n",
        "        # Traitement de chaque segment audio pour identifier les chansons\n",
        "        for i, (segment_bytes, start_time) in enumerate(segments):\n",
        "            print(f\"Traitement du segment {i+1}/{len(segments)} à {start_time}s\")\n",
        "            track_info = await recognize_segment(segment_bytes)\n",
        "            if 'track' in track_info:\n",
        "                current_track_title = track_info['track']['title']\n",
        "                # Écrire le titre dans le fichier s'il n'a pas déjà été écrit\n",
        "                if current_track_title not in recognized_songs:\n",
        "                    recognized_songs.add(current_track_title)\n",
        "                    await songs_file.write(f\"{current_track_title}\\n\")\n",
        "            else:\n",
        "                print(f\"{start_time}s: Chanson non reconnue ou transition\")\n",
        "\n",
        "    # Fin de la reconnaissance des chansons\n",
        "    print(\"Fin de recognize_song\")\n",
        "\n",
        "# Fonction pour exécuter le processus de reconnaissance des chansons\n",
        "async def main():\n",
        "    await recognize_song('/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3')\n",
        "\n",
        "# Point d'entrée principal pour exécuter le programme\n",
        "if __name__ == \"__main__\":\n",
        "    await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8KKYt-SEL4yP",
        "outputId": "8d8fe2f4-f26a-4f4b-8791-34941d805e82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Début de recognize_song\n",
            "Segments divisés : 126\n",
            "Traitement du segment 1/126 à 0.0s\n",
            "0.0s: Chanson non reconnue ou transition\n",
            "Traitement du segment 2/126 à 5.0s\n",
            "Traitement du segment 3/126 à 10.0s\n",
            "Traitement du segment 4/126 à 15.0s\n",
            "Traitement du segment 5/126 à 20.0s\n",
            "Traitement du segment 6/126 à 25.0s\n",
            "Traitement du segment 7/126 à 30.0s\n",
            "Traitement du segment 8/126 à 35.0s\n",
            "Traitement du segment 9/126 à 40.0s\n",
            "Traitement du segment 10/126 à 45.0s\n",
            "Traitement du segment 11/126 à 50.0s\n",
            "Traitement du segment 12/126 à 55.0s\n",
            "Traitement du segment 13/126 à 60.0s\n",
            "Traitement du segment 14/126 à 65.0s\n",
            "Traitement du segment 15/126 à 70.0s\n",
            "Traitement du segment 16/126 à 75.0s\n",
            "Traitement du segment 17/126 à 80.0s\n",
            "Traitement du segment 18/126 à 85.0s\n",
            "Traitement du segment 19/126 à 90.0s\n",
            "Traitement du segment 20/126 à 95.0s\n",
            "Traitement du segment 21/126 à 100.0s\n",
            "Traitement du segment 22/126 à 105.0s\n",
            "Traitement du segment 23/126 à 110.0s\n",
            "Traitement du segment 24/126 à 115.0s\n",
            "Traitement du segment 25/126 à 120.0s\n",
            "Traitement du segment 26/126 à 125.0s\n",
            "Traitement du segment 27/126 à 130.0s\n",
            "Traitement du segment 28/126 à 135.0s\n",
            "Traitement du segment 29/126 à 140.0s\n",
            "Traitement du segment 30/126 à 145.0s\n",
            "Traitement du segment 31/126 à 150.0s\n",
            "Traitement du segment 32/126 à 155.0s\n",
            "Traitement du segment 33/126 à 160.0s\n",
            "Traitement du segment 34/126 à 165.0s\n",
            "Traitement du segment 35/126 à 170.0s\n",
            "Traitement du segment 36/126 à 175.0s\n",
            "Traitement du segment 37/126 à 180.0s\n",
            "Traitement du segment 38/126 à 185.0s\n",
            "Traitement du segment 39/126 à 190.0s\n",
            "Traitement du segment 40/126 à 195.0s\n",
            "Traitement du segment 41/126 à 200.0s\n",
            "Traitement du segment 42/126 à 205.0s\n",
            "Traitement du segment 43/126 à 210.0s\n",
            "Traitement du segment 44/126 à 215.0s\n",
            "Traitement du segment 45/126 à 220.0s\n",
            "Traitement du segment 46/126 à 225.0s\n",
            "Traitement du segment 47/126 à 230.0s\n",
            "Traitement du segment 48/126 à 235.0s\n",
            "Traitement du segment 49/126 à 240.0s\n",
            "Traitement du segment 50/126 à 245.0s\n",
            "Traitement du segment 51/126 à 250.0s\n",
            "Traitement du segment 52/126 à 255.0s\n",
            "Traitement du segment 53/126 à 260.0s\n",
            "Traitement du segment 54/126 à 265.0s\n",
            "Traitement du segment 55/126 à 270.0s\n",
            "Traitement du segment 56/126 à 275.0s\n",
            "Traitement du segment 57/126 à 280.0s\n",
            "Traitement du segment 58/126 à 285.0s\n",
            "Traitement du segment 59/126 à 290.0s\n",
            "Traitement du segment 60/126 à 295.0s\n",
            "Traitement du segment 61/126 à 300.0s\n",
            "Traitement du segment 62/126 à 305.0s\n",
            "Traitement du segment 63/126 à 310.0s\n",
            "Traitement du segment 64/126 à 315.0s\n",
            "Traitement du segment 65/126 à 320.0s\n",
            "Traitement du segment 66/126 à 325.0s\n",
            "Traitement du segment 67/126 à 330.0s\n",
            "Traitement du segment 68/126 à 335.0s\n",
            "Traitement du segment 69/126 à 340.0s\n",
            "Traitement du segment 70/126 à 345.0s\n",
            "Traitement du segment 71/126 à 350.0s\n",
            "Traitement du segment 72/126 à 355.0s\n",
            "Traitement du segment 73/126 à 360.0s\n",
            "Traitement du segment 74/126 à 365.0s\n",
            "Traitement du segment 75/126 à 370.0s\n",
            "Traitement du segment 76/126 à 375.0s\n",
            "Traitement du segment 77/126 à 380.0s\n",
            "Traitement du segment 78/126 à 385.0s\n",
            "Traitement du segment 79/126 à 390.0s\n",
            "Traitement du segment 80/126 à 395.0s\n",
            "Traitement du segment 81/126 à 400.0s\n",
            "Traitement du segment 82/126 à 405.0s\n",
            "Traitement du segment 83/126 à 410.0s\n",
            "Traitement du segment 84/126 à 415.0s\n",
            "Traitement du segment 85/126 à 420.0s\n",
            "Traitement du segment 86/126 à 425.0s\n",
            "Traitement du segment 87/126 à 430.0s\n",
            "Traitement du segment 88/126 à 435.0s\n",
            "Traitement du segment 89/126 à 440.0s\n",
            "Traitement du segment 90/126 à 445.0s\n",
            "Traitement du segment 91/126 à 450.0s\n",
            "Traitement du segment 92/126 à 455.0s\n",
            "Traitement du segment 93/126 à 460.0s\n",
            "Traitement du segment 94/126 à 465.0s\n",
            "Traitement du segment 95/126 à 470.0s\n",
            "Traitement du segment 96/126 à 475.0s\n",
            "Traitement du segment 97/126 à 480.0s\n",
            "Traitement du segment 98/126 à 485.0s\n",
            "Traitement du segment 99/126 à 490.0s\n",
            "Traitement du segment 100/126 à 495.0s\n",
            "Traitement du segment 101/126 à 500.0s\n",
            "Traitement du segment 102/126 à 505.0s\n",
            "Traitement du segment 103/126 à 510.0s\n",
            "Traitement du segment 104/126 à 515.0s\n",
            "Traitement du segment 105/126 à 520.0s\n",
            "Traitement du segment 106/126 à 525.0s\n",
            "Traitement du segment 107/126 à 530.0s\n",
            "Traitement du segment 108/126 à 535.0s\n",
            "Traitement du segment 109/126 à 540.0s\n",
            "Traitement du segment 110/126 à 545.0s\n",
            "Traitement du segment 111/126 à 550.0s\n",
            "Traitement du segment 112/126 à 555.0s\n",
            "Traitement du segment 113/126 à 560.0s\n",
            "Traitement du segment 114/126 à 565.0s\n",
            "Traitement du segment 115/126 à 570.0s\n",
            "Traitement du segment 116/126 à 575.0s\n",
            "Traitement du segment 117/126 à 580.0s\n",
            "Traitement du segment 118/126 à 585.0s\n",
            "Traitement du segment 119/126 à 590.0s\n",
            "Traitement du segment 120/126 à 595.0s\n",
            "Traitement du segment 121/126 à 600.0s\n",
            "Traitement du segment 122/126 à 605.0s\n",
            "Traitement du segment 123/126 à 610.0s\n",
            "Traitement du segment 124/126 à 615.0s\n",
            "Traitement du segment 125/126 à 620.0s\n",
            "Traitement du segment 126/126 à 625.0s\n",
            "Fin de recognize_song\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E684WtRLS5Zd",
        "outputId": "07768cbc-4129-4eda-c098-56d3f3cf281e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "drive  sample_data  songs_list.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import aiofiles\n",
        "\n",
        "async def read_songs_list(filepath):\n",
        "    song_titles = []\n",
        "    async with aiofiles.open(filepath, 'r') as file:\n",
        "        async for line in file:\n",
        "            song_titles.append(line.strip())\n",
        "    return song_titles"
      ],
      "metadata": {
        "id": "V-8uCMwBN8sr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install youtube_dl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cd96DoElOJxR",
        "outputId": "4eddcf0c-1a37-4047-80c2-0721ca92eab0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting youtube_dl\n",
            "  Downloading youtube_dl-2021.12.17-py2.py3-none-any.whl (1.9 MB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/1.9 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.2/1.9 MB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.9/1.9 MB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m18.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m15.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: youtube_dl\n",
            "Successfully installed youtube_dl-2021.12.17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade youtube-dl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KOfSIMXpUihn",
        "outputId": "3713760f-502c-421d-cc4c-f8b636f3ba5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: youtube-dl in /usr/local/lib/python3.10/dist-packages (2021.12.17)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST YOUTUBE_DL\n",
        "import asyncio\n",
        "import youtube_dl\n",
        "import aiofiles\n",
        "\n",
        "# Fonction pour lire la liste des chansons à partir du fichier\n",
        "async def read_songs_list(filepath):\n",
        "    song_titles = []\n",
        "    async with aiofiles.open(filepath, 'r') as file:\n",
        "        async for line in file:\n",
        "            song_titles.append(line.strip())\n",
        "    return song_titles\n",
        "\n",
        "# Fonction pour télécharger une chanson donnée à partir de YouTube\n",
        "def download_song(title, download_path):\n",
        "    ydl_opts = {\n",
        "        'format': 'bestaudio/best',\n",
        "        'postprocessors': [{\n",
        "            'key': 'FFmpegExtractAudio',\n",
        "            'preferredcodec': 'mp3',\n",
        "            'preferredquality': '192',\n",
        "        }],\n",
        "        'outtmpl': f'{download_path}/{title}.mp3'\n",
        "    }\n",
        "\n",
        "    with youtube_dl.YoutubeDL(ydl_opts) as ydl:\n",
        "        try:\n",
        "            results = ydl.extract_info(f\"ytsearch:{title}\", download=False)\n",
        "            video = results['entries'][0]\n",
        "            ydl.download([video['webpage_url']])\n",
        "            print(f\"Téléchargé : {title}.mp3\")\n",
        "        except Exception as e:\n",
        "            print(f\"Erreur lors du téléchargement de {title}: {str(e)}\")\n",
        "\n",
        "# Fonction principale\n",
        "async def main():\n",
        "    songs_list_path = 'song_list.txt'\n",
        "    download_path = '/content/drive/MyDrive/PROJET_SON/10MIN_DJ.mp3''\n",
        "\n",
        "    song_titles = await read_songs_list(songs_list_path)\n",
        "\n",
        "\n",
        "    for title in song_titles:\n",
        "        download_song(title, download_path)\n",
        "\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "91P4T9mBRl0m",
        "outputId": "dc61ab61-5c0c-4a5d-c6bf-4e04e5cc9c08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unexpected indent (<ipython-input-26-4503dea2f5ae>, line 26)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-26-4503dea2f5ae>\"\u001b[0;36m, line \u001b[0;32m26\u001b[0m\n\u001b[0;31m    with youtube_dl.YoutubeDL(ydl_opts) as ydl:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U yt-dlp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jgFA30LJVUOW",
        "outputId": "b6fa64ee-8879-40e3-955c-43aaec2f40c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting yt-dlp\n",
            "  Downloading yt_dlp-2024.4.9-py3-none-any.whl (3.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m16.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting brotli (from yt-dlp)\n",
            "  Downloading Brotli-1.1.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (3.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m42.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from yt-dlp) (2024.2.2)\n",
            "Collecting mutagen (from yt-dlp)\n",
            "  Downloading mutagen-1.47.0-py3-none-any.whl (194 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.4/194.4 kB\u001b[0m \u001b[31m22.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pycryptodomex (from yt-dlp)\n",
            "  Downloading pycryptodomex-3.20.0-cp35-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m51.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: requests<3,>=2.31.0 in /usr/local/lib/python3.10/dist-packages (from yt-dlp) (2.31.0)\n",
            "Requirement already satisfied: urllib3<3,>=1.26.17 in /usr/local/lib/python3.10/dist-packages (from yt-dlp) (2.0.7)\n",
            "Collecting websockets>=12.0 (from yt-dlp)\n",
            "  Downloading websockets-12.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (130 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.2/130.2 kB\u001b[0m \u001b[31m16.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.31.0->yt-dlp) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.31.0->yt-dlp) (3.6)\n",
            "Installing collected packages: brotli, websockets, pycryptodomex, mutagen, yt-dlp\n",
            "Successfully installed brotli-1.1.0 mutagen-1.47.0 pycryptodomex-3.20.0 websockets-12.0 yt-dlp-2024.4.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST YT_DLP\n",
        "import asyncio\n",
        "import yt_dlp as youtube_dl\n",
        "import aiofiles\n",
        "\n",
        "# Fonction pour lire la liste des chansons à partir du fichier\n",
        "async def read_songs_list(filepath):\n",
        "    song_titles = []\n",
        "    async with aiofiles.open(filepath, 'r') as file:\n",
        "        async for line in file:\n",
        "            song_titles.append(line.strip())\n",
        "    return song_titles\n",
        "\n",
        "# Fonction pour télécharger une chanson donnée à partir de YouTube avec yt-dlp\n",
        "def download_song(title, download_path):\n",
        "    ydl_opts = {\n",
        "        'format': 'bestaudio/best',\n",
        "        'postprocessors': [{\n",
        "            'key': 'FFmpegExtractAudio',\n",
        "            'preferredcodec': 'mp3',\n",
        "            'preferredquality': '192',\n",
        "        }],\n",
        "        'outtmpl': f'{download_path}/{title}.mp3'\n",
        "    }\n",
        "\n",
        "    with youtube_dl.YoutubeDL(ydl_opts) as ydl:\n",
        "        try:\n",
        "            results = ydl.extract_info(f\"ytsearch:{title}\", download=False)\n",
        "            video = results['entries'][0]\n",
        "            ydl.download([video['webpage_url']])\n",
        "            print(f\"Téléchargé : {title}.mp3\")\n",
        "        except Exception as e:\n",
        "            print(f\"Erreur lors du téléchargement de {title}: {str(e)}\")\n",
        "\n",
        "# Fonction principale\n",
        "async def main():\n",
        "\n",
        "    songs_list_path = 'songs_list.txt'  # Chemin local dans Colab\n",
        "    download_path = '/content/downloads'  # Chemin local dans Colab pour stocker les téléchargements\n",
        "    !mkdir -p {download_path}\n",
        "\n",
        "    song_titles = await read_songs_list(songs_list_path)\n",
        "\n",
        "\n",
        "    for title in song_titles:\n",
        "        download_song(title, download_path)\n",
        "\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nfwydaevValn",
        "outputId": "33f13d2a-0664-4dab-f439-47f8eca8bd9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[youtube:search] Extracting URL: ytsearch:Universal Magnetic (Best of Decade I Version)\n",
            "[download] Downloading playlist: Universal Magnetic (Best of Decade I Version)\n",
            "[youtube:search] query \"Universal Magnetic (Best of Decade I Version)\": Downloading web client config\n",
            "[youtube:search] query \"Universal Magnetic (Best of Decade I Version)\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"Universal Magnetic (Best of Decade I Version)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de Universal Magnetic (Best of Decade I Version): ERROR: query \"Universal Magnetic (Best of Decade I Version)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:Give It To Me Baby\n",
            "[download] Downloading playlist: Give It To Me Baby\n",
            "[youtube:search] query \"Give It To Me Baby\": Downloading web client config\n",
            "[youtube:search] query \"Give It To Me Baby\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"Give It To Me Baby\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de Give It To Me Baby: ERROR: query \"Give It To Me Baby\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:Don't Stop 'Til You Get Enough\n",
            "[download] Downloading playlist: Don't Stop 'Til You Get Enough\n",
            "[youtube:search] query \"Don't Stop 'Til You Get Enough\": Downloading web client config\n",
            "[youtube:search] query \"Don't Stop 'Til You Get Enough\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"Don't Stop 'Til You Get Enough\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de Don't Stop 'Til You Get Enough: ERROR: query \"Don't Stop 'Til You Get Enough\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:Still in the Groove\n",
            "[download] Downloading playlist: Still in the Groove\n",
            "[youtube:search] query \"Still in the Groove\": Downloading web client config\n",
            "[youtube:search] query \"Still in the Groove\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"Still in the Groove\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de Still in the Groove: ERROR: query \"Still in the Groove\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "[download] Downloading playlist: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "[youtube:search] query \"Burn Rubber On Me (Why You Wanna Hurt Me)\": Downloading web client config\n",
            "[youtube:search] query \"Burn Rubber On Me (Why You Wanna Hurt Me)\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"Burn Rubber On Me (Why You Wanna Hurt Me)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de Burn Rubber On Me (Why You Wanna Hurt Me): ERROR: query \"Burn Rubber On Me (Why You Wanna Hurt Me)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:You're The One For Me (Remix)\n",
            "[download] Downloading playlist: You're The One For Me (Remix)\n",
            "[youtube:search] query \"You're The One For Me (Remix)\": Downloading web client config\n",
            "[youtube:search] query \"You're The One For Me (Remix)\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"You're The One For Me (Remix)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de You're The One For Me (Remix): ERROR: query \"You're The One For Me (Remix)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:Ai No Corrida (feat. Dune)\n",
            "[download] Downloading playlist: Ai No Corrida (feat. Dune)\n",
            "[youtube:search] query \"Ai No Corrida (feat. Dune)\": Downloading web client config\n",
            "[youtube:search] query \"Ai No Corrida (feat. Dune)\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"Ai No Corrida (feat. Dune)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de Ai No Corrida (feat. Dune): ERROR: query \"Ai No Corrida (feat. Dune)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:Don't Drop My Love\n",
            "[download] Downloading playlist: Don't Drop My Love\n",
            "[youtube:search] query \"Don't Drop My Love\": Downloading web client config\n",
            "[youtube:search] query \"Don't Drop My Love\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"Don't Drop My Love\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de Don't Drop My Love: ERROR: query \"Don't Drop My Love\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n",
            "[youtube:search] Extracting URL: ytsearch:I Love the Nightlife (Disco 'Round)\n",
            "[download] Downloading playlist: I Love the Nightlife (Disco 'Round)\n",
            "[youtube:search] query \"I Love the Nightlife (Disco 'Round)\": Downloading web client config\n",
            "[youtube:search] query \"I Love the Nightlife (Disco 'Round)\" page 1: Downloading API JSON\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR: query \"I Love the Nightlife (Disco 'Round)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Erreur lors du téléchargement de I Love the Nightlife (Disco 'Round): ERROR: query \"I Love the Nightlife (Disco 'Round)\" page 1: Failed to parse JSON (caused by JSONDecodeError(\"Expecting value in '': line 1 column 1 (char 0)\")); please report this issue on  https://github.com/yt-dlp/yt-dlp/issues?q= , filling out the appropriate issue template. Confirm you are on the latest version using  yt-dlp -U\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST PYTUBE\n",
        "from pytube import Search, YouTube\n",
        "from google.colab import drive\n",
        "import os\n",
        "\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "\n",
        "def download_song(title, output_folder):\n",
        "    try:\n",
        "        # Rechercher la vidéo sur YouTube et prendre la première correspondance\n",
        "        search_result = Search(title)\n",
        "        video = search_result.results[0]  # Première vidéo de la liste de résultats\n",
        "        youtube_video = YouTube(video.watch_url)\n",
        "        audio_stream = youtube_video.streams.filter(only_audio=True).first()\n",
        "        output_path = os.path.join(output_folder, f\"{title}.mp3\")\n",
        "        audio_stream.download(filename=output_path)\n",
        "        print(\"YouTube audio successfully downloaded:\", output_path)\n",
        "    except Exception as e:\n",
        "        print(\"Error downloading\", title, \":\", str(e))\n",
        "\n",
        "\n",
        "songs_list_path = '/content/drive/MyDrive/YourFolder/song_list.txt'\n",
        "output_folder = '/content/drive/MyDrive/YourFolder/DownloadedSongs'\n",
        "os.makedirs(output_folder, exist_ok=True)\n",
        "\n",
        "# Lire les titres de chansons à partir du fichier texte\n",
        "with open(songs_list_path, 'r') as file:\n",
        "    song_titles = file.read().splitlines()\n",
        "\n",
        "# Téléchargement\n",
        "for title in song_titles:\n",
        "    download_song(title, output_folder)"
      ],
      "metadata": {
        "id": "WXar15_5toPB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install pytube"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VKv3aqWQuZ6G",
        "outputId": "04347a19-b88f-4453-f53f-b183f43fda2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pytube\n",
            "  Downloading pytube-15.0.0-py3-none-any.whl (57 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/57.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.6/57.6 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pytube\n",
            "Successfully installed pytube-15.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE FINAL QUI PERMET DE TELECHARGER LES MUSIQUE DANS LE COLAB\n",
        "import asyncio\n",
        "import aiofiles\n",
        "from pytube import Search, YouTube\n",
        "import os\n",
        "\n",
        "# Lecture de la liste des titres de chansons depuis un fichier texte\n",
        "async def read_songs_list(filepath):\n",
        "    song_titles = []\n",
        "    async with aiofiles.open(filepath, 'r') as file:\n",
        "        async for line in file:\n",
        "            song_titles.append(line.strip())\n",
        "    return song_titles\n",
        "\n",
        "# Téléchargement de l'audio YouTube basé sur le titre de la chanson\n",
        "def download_song(title, download_path):\n",
        "    try:\n",
        "        # Utilisation de Pytube pour rechercher et accéder au flux audio de la première vidéo correspondante\n",
        "        search = Search(title)\n",
        "        video = search.results[0]  # Sélection de la première vidéo trouvée\n",
        "        youtube_video = YouTube(video.watch_url)  # Chargement de cette vidéo\n",
        "        audio_stream = youtube_video.streams.filter(only_audio=True).first()\n",
        "        output_path = os.path.join(download_path, f\"{title}.mp3\")\n",
        "        audio_stream.download(filename=output_path)  # Téléchargement du fichier audio\n",
        "        print(f\"Téléchargé : {output_path}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Erreur lors du téléchargement de {title}: {str(e)}\")\n",
        "\n",
        "# Fonction principale orchestrant le processus de lecture et de téléchargement\n",
        "async def main():\n",
        "    # Configuration des chemins pour les fichiers de titres et le répertoire de téléchargement\n",
        "    songs_list_path = 'songs_list.txt'\n",
        "    download_path = '/content/downloads'\n",
        "\n",
        "    # Création du répertoire de téléchargement si nécessaire\n",
        "    if not os.path.exists(download_path):\n",
        "        os.makedirs(download_path)\n",
        "\n",
        "    # Lecture des titres de chansons et téléchargement séquentiel de chacun\n",
        "    song_titles = await read_songs_list(songs_list_path)\n",
        "    for title in song_titles:\n",
        "        download_song(title, download_path)\n",
        "\n",
        "# Lancement de la routine principale\n",
        "await main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MzDuuQRsuNWT",
        "outputId": "50c16cd7-d5d7-40d5-d0ac-2179bf09ae91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Téléchargé : /content/downloads/Universal Magnetic (Best of Decade I Version).mp3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['reelShelfRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Give It To Me Baby\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n",
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['reelShelfRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Give It To Me Baby\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Téléchargé : /content/downloads/Give It To Me Baby.mp3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['adSlotRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Don't Stop 'Til You Get Enough\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n",
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['adSlotRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Don't Stop 'Til You Get Enough\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n",
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['adSlotRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Don't Stop 'Til You Get Enough\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n",
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['adSlotRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Don't Stop 'Til You Get Enough\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n",
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['reelShelfRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Don't Stop 'Til You Get Enough\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n",
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['reelShelfRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Don't Stop 'Til You Get Enough\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Téléchargé : /content/downloads/Don't Stop 'Til You Get Enough.mp3\n",
            "Téléchargé : /content/downloads/Still in the Groove.mp3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:pytube.contrib.search:Unexpected renderer encountered.\n",
            "WARNING:pytube.contrib.search:Renderer name: dict_keys(['reelShelfRenderer'])\n",
            "WARNING:pytube.contrib.search:Search term: Burn Rubber On Me (Why You Wanna Hurt Me)\n",
            "WARNING:pytube.contrib.search:Please open an issue at https://github.com/pytube/pytube/issues and provide this log output.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Téléchargé : /content/downloads/Burn Rubber On Me (Why You Wanna Hurt Me).mp3\n",
            "Téléchargé : /content/downloads/You're The One For Me (Remix).mp3\n",
            "Téléchargé : /content/downloads/Ai No Corrida (feat. Dune).mp3\n",
            "Téléchargé : /content/downloads/Don't Drop My Love.mp3\n",
            "Téléchargé : /content/downloads/I Love the Nightlife (Disco 'Round).mp3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#DELAPORTE Theo"
      ],
      "metadata": {
        "id": "M_yg7dQwychU"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}